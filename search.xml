<?xml version="1.0" encoding="utf-8"?>
<search> 
  
    
    <entry>
      <title>Java面试题25</title>
      <link href="/2020/02/01/Java%E9%9D%A2%E8%AF%95%E9%A2%9825/"/>
      <url>/2020/02/01/Java%E9%9D%A2%E8%AF%95%E9%A2%9825/</url>
      
        <content type="html"><![CDATA[<h2 id="编程题：罗马数字转换成阿拉伯数字"><a href="#编程题：罗马数字转换成阿拉伯数字" class="headerlink" title="编程题：罗马数字转换成阿拉伯数字"></a>编程题：罗马数字转换成阿拉伯数字</h2><p>要求：给定一个罗马数字，请将它转换成阿拉伯数字。罗马数字的输入范围是1-3999。例如：<br>输入：III，输出：3<br>输入：LVIII，输出：58</p><p>规则：<br>罗马数字是阿拉伯数字传入之前使用的一种数码。罗马数字采用七个罗马字母作数字、即Ⅰ（1）、X（10）、C（100）、M（1000）、V（5）、L（50）、D（500）。记数的方法：</p><ul><li>相同的数字连写，所表示的数等于这些数字相加得到的数，如 III=3；</li><li>小的数字在大的数字的右边，所表示的数等于这些数字相加得到的数，如 VIII=8、XII=12；</li><li>小的数字（限于 Ⅰ、X 和 C）在大的数字的左边，所表示的数等于大数减小数得到的数，如 Ⅳ=4、Ⅸ=9；</li><li>在一个数的上面画一条横线，表示这个数增值 1,000 倍。例如： =5000 (此项规则不需要实现)</li></ul><p>举例：</p><ul><li><p>个位数举例<br>Ⅰ－1、Ⅱ－2、Ⅲ－3、Ⅳ－4、Ⅴ－5、Ⅵ－6、Ⅶ－7、Ⅷ－8、Ⅸ－9</p></li><li><p>十位数举例<br>Ⅹ－10、Ⅺ－11、Ⅻ－12、XIII－13、XIV－14、XV－15、XVI－16、XVII－17、XVIII－18、XIX－19、XX－20、XXI－21、XXII－22、XXIX－29、XXX－30、XXXIV－34、XXXV－35、XXXIX－39、XL－40、L－50、LI－51、LV－55、LX－60、LXV－65、LXXX－80、XC－90、XCIII－93、XCV－95、XCVIII－98、XCIX－99</p></li><li><p>百位数举例<br>C－100、CC－200、CCC－300、CD－400、D－500、DC－600、DCC－700、DCCC－800、CM－900、CMXCIX－999</p></li><li><p>千位数举例<br>M－1000、MC－1100、MCD－1400、MD－1500、MDC－1600、MDCLXVI－1666、MDCCCLXXXVIII－1888、MDCCCXCIX－1899、MCM－1900、MCMLXXVI－1976、MCMLXXXIV－1984、MCMXC－1990、MM－2000、MMMCMXCIX－3999</p></li></ul><h2 id="编程题：网球记分"><a href="#编程题：网球记分" class="headerlink" title="编程题：网球记分"></a>编程题：网球记分</h2><p>网球有一个相当古怪的得分系统，对于新手来说，理解它有点困难。网球协会希望通过你建立了一个记分牌，以显示网球比赛期间的当前得分。裁判将有一个带有两个按钮的手机，标有“球员1得分”和“球员2得分”。当球员得分时，裁判按下相应按钮，记分牌将显示当前分数。（当您第一次打开记分牌时，假设两名球员都没有得分）。当其中一名球员获胜时，记分牌应显示谁获胜。</p><p>您的任务是编写一个“TennisGame”类，其中包含将正确分数输出为字符串以显示在记分板上的逻辑。你可以假设裁判按下“球员1得分”按钮将会调用方法“wonPoint（”player1“），同样地按下另一个按钮时wonPoint（”player2“）。 之后，记分牌将调用“getScore（）”来询问它应显示的内容。此方法应返回包含当前分数的字符串。</p><p>关于网球计分的规则，总结如下：</p><ol><li>第一位总分达到4分及以上，且至少比对手多2分的球员赢得比赛。记分牌上显示：“Win for player1”或“Win for player2”。</li><li>以网球特有的方式描述每场比赛的得分：从0到3的得分分别被描述为“Love”,“Fifteen”,“Thirty”和“Forty”，例如当比分为0：3时，记分牌显示为：”Love : Thirty”</li><li>如果每个球员至少得到三分，并且得分相等，则得分显示为“Deuce”</li><li>如果两方至少得了三分并且一名球员比对手多一分，则记分牌显示为“Advantage player1”或“Advantage player2”</li></ol><p>网球协会同意你只需展示当前局的得分，不用理会每盘（一盘包括多局）的分数。</p>]]></content>
      
      
      <categories>
          
          <category> Java面试题 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>jenkins常用插件</title>
      <link href="/2019/08/26/jenkins%E5%B8%B8%E7%94%A8%E6%8F%92%E4%BB%B6/"/>
      <url>/2019/08/26/jenkins%E5%B8%B8%E7%94%A8%E6%8F%92%E4%BB%B6/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      <categories>
          
          <category> SDL </category>
          
      </categories>
      
      
        <tags>
            
            <tag> jenkins </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>北部创新业务部驻中原银行分享(第一季)</title>
      <link href="/2019/07/18/share1/"/>
      <url>/2019/07/18/share1/</url>
      
        <content type="html"><![CDATA[<h2 id="第1期"><a href="#第1期" class="headerlink" title="第1期"></a>第1期</h2><p><strong>培训主题</strong>: 渐进式MVVM框架Vue简析</p><p><strong>主讲老师</strong>: 单少华</p><p><strong>培训时间</strong>: 2019/5/15 晚上 7:30</p><p><strong>培训地点</strong>: 景峰国际中心</p><p><strong>相关资料</strong>: <a href="单少华-渐进式MVVM框架Vue简析.pdf">单少华-渐进式MVVM框架Vue简析</a></p><h2 id="第2期"><a href="#第2期" class="headerlink" title="第2期"></a>第2期</h2><p><strong>培训主题</strong>: 需求分析的那些事</p><p><strong>主讲老师</strong>: 付美玲</p><p><strong>培训时间</strong>: 2019/5/22 晚上 7:30</p><p><strong>培训地点</strong>: 景峰国际中心</p><p><strong>相关资料</strong>: <a href="付美玲-需求分析的那些事.pdf">付美玲-需求分析的那些事</a></p><h2 id="第3期"><a href="#第3期" class="headerlink" title="第3期"></a>第3期</h2><p><strong>培训主题</strong>: 最接近原生App体验的前端框架MUI</p><p><strong>主讲老师</strong>: 何培培</p><p><strong>培训时间</strong>: 2019/5/29 晚上 7:30</p><p><strong>培训地点</strong>: 景峰国际中心</p><p><strong>相关资料</strong>: <a href="何培培-最接近原生App体验的前端框架MUI.pdf">何培培-最接近原生App体验的前端框架MUI</a></p><h2 id="第4期"><a href="#第4期" class="headerlink" title="第4期"></a>第4期</h2><p><strong>培训主题</strong>: PE代码解析</p><p><strong>主讲老师</strong>: 杨爱霞</p><p><strong>培训时间</strong>: 2019/6/12 晚上 7:30</p><p><strong>培训地点</strong>: 景峰国际中心6楼会议室</p><p><strong>相关资料</strong>: <a href="杨爱霞-PE代码解析.pdf">杨爱霞-PE代码解析</a></p><h2 id="第5期"><a href="#第5期" class="headerlink" title="第5期"></a>第5期</h2><p><strong>培训主题</strong>: EMP在移动营销上的应用</p><p><strong>主讲老师</strong>: 吕少卜</p><p><strong>培训时间</strong>: 2019/6/19 晚上 7:30</p><p><strong>培训地点</strong>: 景峰国际中心6楼会议室</p><p><strong>相关资料</strong>: <a href="吕少卜-EMP在移动营销上的应用.pdf">吕少卜-EMP在移动营销上的应用</a></p><h2 id="第6期"><a href="#第6期" class="headerlink" title="第6期"></a>第6期</h2><p><strong>培训主题</strong>: 小程序的应用开发</p><p><strong>主讲老师</strong>: 马恒飞</p><p><strong>培训时间</strong>: 2019/6/26 晚上 7:30</p><p><strong>培训地点</strong>: 景峰国际中心6楼会议室</p><p><strong>相关资料</strong>: <a href="马恒飞-小程序的应用开发.pdf">马恒飞-小程序的应用开发</a></p>]]></content>
      
      
      <categories>
          
          <category> 分享 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 宇信 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Dockerfile语法</title>
      <link href="/2019/05/06/Dockerfile%E8%AF%AD%E6%B3%95/"/>
      <url>/2019/05/06/Dockerfile%E8%AF%AD%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<h2 id="Dockerfile语法"><a href="#Dockerfile语法" class="headerlink" title="Dockerfile语法"></a>Dockerfile语法</h2><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 定义变量</span></span><br><span class="line"><span class="comment"># ARG &lt;name&gt;[=&lt;default value&gt;]</span></span><br><span class="line"><span class="comment"># 注: 设置变量命令，ARG命令定义了一个变量，在docker build创建镜像的时候，使用 --build-arg &lt;varname&gt;=&lt;value&gt;来指定参数</span></span><br><span class="line"><span class="keyword">ARG</span> a=<span class="number">1</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 基础镜像</span></span><br><span class="line"><span class="comment"># FROM &lt;image&gt; [AS &lt;name&gt;]</span></span><br><span class="line"><span class="comment"># FROM &lt;image&gt;[:&lt;tag&gt;] [AS &lt;name&gt;]</span></span><br><span class="line"><span class="comment"># FROM &lt;image&gt;[@&lt;digest&gt;] [AS &lt;name&gt;]</span></span><br><span class="line"><span class="comment"># 注:</span></span><br><span class="line"><span class="comment"># image 镜像名</span></span><br><span class="line"><span class="comment"># tag 镜像版本</span></span><br><span class="line"><span class="comment"># digest 镜像的manifes文件的sha256码, 通过docker images --digest查看镜像的digest值</span></span><br><span class="line"><span class="keyword">FROM</span> centos</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 标签</span></span><br><span class="line"><span class="comment"># LABEL &lt;key&gt;=&lt;value&gt; &lt;key&gt;=&lt;value&gt; &lt;key&gt;=&lt;value&gt; ...</span></span><br><span class="line"><span class="comment"># 注: 通过docker inspect &lt;image&gt;查看</span></span><br><span class="line"><span class="keyword">LABEL</span> com.example.version="0.0.1-beta" com.example.release-date="2015-02-12"</span><br><span class="line"></span><br><span class="line"># 设置工作目录, 对RUN,CMD,ENTRYPOINT,COPY,ADD生效</span><br><span class="line"># WORKDIR /path/to/workdir</span><br><span class="line"># WORKDIR</span><br><span class="line"></span><br><span class="line"># 构件容器时就运行的命令以及提交运行结果</span><br><span class="line"># RUN &lt;command&gt;</span><br><span class="line"># RUN ["executable", "param1", "param2"]</span><br><span class="line"># 注: 多行命令不要写多个RUN，原因是Dockerfile中每一个指令都会建立一层.</span><br><span class="line">RUN ["/bin/bash", "-c", "echo hello"]</span><br><span class="line"></span><br><span class="line"># 把文件添加到容器中</span><br><span class="line"># ADD &lt;src&gt; &lt;dest&gt;</span><br><span class="line"># ADD ["&lt;src&gt;", "&lt;dest&gt;"]</span><br><span class="line"># 注:</span><br><span class="line"># src 可以是一个本地文件或者是一个本地压缩文件，还可以是一个url</span><br><span class="line"># dest 可以是容器内的绝对路径，也可以是相对于工作目录的相对路径</span><br><span class="line"># 注:</span><br><span class="line"># 尽量不要把scr写成一个文件夹，如果&lt;src&gt;是一个文件夹了，复制整个目录的内容,包括文件系统元数据</span><br><span class="line"># 如果是压缩包, 会自动解压到dest中</span><br><span class="line">ADD ["target/abc-1.0-SNAPSHOT.jar", "abc.jar"]</span><br><span class="line"></span><br><span class="line"># 把文件复制到容器中</span><br><span class="line"># COPY &lt;src&gt;... &lt;dest&gt;</span><br><span class="line"># COPY ["&lt;src&gt;",... "&lt;dest&gt;"]</span><br><span class="line"># 注:</span><br><span class="line"># src 可以只能是一个本地文件</span><br><span class="line"># dest 可以是容器内的绝对路径，也可以是相对于工作目录的相对路径</span><br><span class="line">COPY ["pom.xml", "pom.xml"]</span><br><span class="line"></span><br><span class="line"># 容器启动时执行的命令</span><br><span class="line"># CMD ["executable","param1","param2"]</span><br><span class="line"># CMD ["param1","param2"]</span><br><span class="line"># CMD command param1 param2</span><br><span class="line"># 注: 打印的内容会在contrainer log中显示</span><br><span class="line">CMD [ "echo", "abc"]</span><br><span class="line"></span><br><span class="line"># 容器启动时执行的命令</span><br><span class="line"># ENTRYPOINT ["executable", "param1", "param2"]</span><br><span class="line"># ENTRYPOINT command param1 param2</span><br><span class="line"># 注: 和CMD的区别, 参照 https://docs.docker.com/engine/reference/builder/#understand-how-cmd-and-entrypoint-interact</span><br><span class="line"># 最佳实践</span><br><span class="line"># 1. 使用Run指令安装应用和软件包, 构建镜像</span><br><span class="line"># 2. 如果Docker镜像的用途是运行应用程序或服务, 使用ENTRYPOINT指令, CMD可为ENTRYPOINT提供额外的参数</span><br><span class="line"># 3. 如果想为容器设置默认的启动命令, 使用CMD指令, 用户可在docker run命令行中替换默认的命令</span><br><span class="line">ENTRYPOINT ["java", "-jar", "abc.jar"]</span><br><span class="line"></span><br><span class="line"># 设置环境变量</span><br><span class="line"># ENV &lt;key&gt; &lt;value&gt;</span><br><span class="line"># ENV &lt;key&gt;=&lt;value&gt; ...</span><br><span class="line">ENV ADMIN_USER="mark"</span><br><span class="line"></span><br><span class="line"># 可实现挂载功能，可以将本地文件夹或者其他容器中的文件夹挂在到这个容器中</span><br><span class="line"># 注: 容器使用的是AUFS，这种文件系统不能持久化数据，当容器关闭后，所有的更改都会丢失。所以当数据需要持久化时用这个命令。</span><br><span class="line"># VOLUME ["/data"]</span><br><span class="line"></span><br><span class="line"># 暴露端口</span><br><span class="line"># EXPOSE &lt;port&gt; [&lt;port&gt;/&lt;protocol&gt;...]</span><br><span class="line">EXPOSE 80/tcp</span><br><span class="line">EXPOSE 80/ud</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Docker </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Docker </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Java面试题24</title>
      <link href="/2019/04/22/Java%E9%9D%A2%E8%AF%95%E9%A2%9824/"/>
      <url>/2019/04/22/Java%E9%9D%A2%E8%AF%95%E9%A2%9824/</url>
      
        <content type="html"><![CDATA[<ol><li><p>请写出下列代码的运行结果, 如有错误请先进行修改</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">resetList</span><span class="params">(List&lt;Integer&gt; dataList)</span> </span>&#123;</span><br><span class="line">    dataList.subList(<span class="number">2</span>, <span class="number">4</span>).set(<span class="number">0</span>, <span class="number">50</span>);</span><br><span class="line">    dataList = <span class="keyword">new</span> ArrayList&lt;&gt;(dataList);</span><br><span class="line">    dataList.add(<span class="number">20</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">setOne</span><span class="params">(List&lt;Integer&gt; dataList)</span> </span>&#123;</span><br><span class="line">    dataList.set(<span class="number">3</span>, <span class="number">80</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    List&lt;Integer&gt; dataList = <span class="keyword">new</span> ArrayList&lt;&gt;(Arrays.asList(<span class="number">10</span>, <span class="number">20</span>, <span class="number">30</span>, <span class="keyword">null</span>));</span><br><span class="line">    resetList(dataList);</span><br><span class="line">    setOne(dataList);</span><br><span class="line">    <span class="keyword">int</span> sum = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (Integer v : dataList) &#123;</span><br><span class="line">        sum += v;</span><br><span class="line">    &#125;</span><br><span class="line">    System.out.println(sum);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>请对比<code>Exception</code>和<code>Error</code>的区别? 运行时异常与一般异常有何区别? <code>NoClassDefFoundError</code>和<code>ClassNotFoundException</code>有何区别?</p></li><li>请问一下集合框架有何不同, <code>HashTable</code>、<code>HashMap</code>、<code>TreeMap</code>?</li><li>请列举你了解的<code>Java</code>垃圾收集器, 并说明其特点?</li><li>请列举<code>Spring</code>框架中用到了哪些设计模式, 并举例说明.</li><li>请编写<code>MySQL</code>的分页查询语句, 要考虑性能和优化问题.</li><li>一个社区网站每天成千上万的人在上面写博客, 如何让程序自动快速判断这篇文章是抄袭另一篇文章是网站负责人比较头疼的问题, 如果把这个问题交给你, 你会怎么解决? 请描述你解决这个问题的思路</li></ol>]]></content>
      
      
      <categories>
          
          <category> Java面试题 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> 人民在线 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Java面试题23</title>
      <link href="/2019/04/16/Java%E9%9D%A2%E8%AF%95%E9%A2%9823/"/>
      <url>/2019/04/16/Java%E9%9D%A2%E8%AF%95%E9%A2%9823/</url>
      
        <content type="html"><![CDATA[<h3 id="一-单选题"><a href="#一-单选题" class="headerlink" title="一. 单选题"></a>一. 单选题</h3><ol><li><p>按照MVC设计模式, JSP用于实现()</p><p>A. Model</p><p>B. View</p><p>C. Controller</p><p>D. 容器</p></li><li><p>下列说法正确的有()</p><p>A. class中的constructor不可省略</p><p>B. constructor 在一个对象被new时执行</p><p>C. constructor 在一个对象被new时执行</p><p>D. 一个class只能定义一个constructor</p></li><li><p>下列哪一种叙述是正确的()</p><p>A. abstract修饰符可修饰字段, 方法和类</p><p>B. 抽象方法的body部分必须用一对大括号{}包住</p><p>C. 声明抽象方法, 大括号可有可无</p><p>D. 声明抽象方法不可写出大括号</p></li><li><p>执行如下程序代码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">a = <span class="number">0</span>; c = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">do</span> &#123;</span><br><span class="line">    --c;</span><br><span class="line">    a = a - <span class="number">1</span>;</span><br><span class="line">&#125; <span class="keyword">while</span>(a &gt; <span class="number">0</span>);</span><br></pre></td></tr></table></figure><p>则c的值是()</p><p>A. 0</p><p>B. 1</p><p>C. -1</p><p>D. 死循环</p></li><li><p>下列语句正确的是()</p><p>A. 形式参数可被视为local variable</p><p>B. 形式参数可被字段修饰符修饰</p><p>C. 形式参数为方法被调用时, 真正被传递的参数</p><p>D. 形式参数不可以是对象</p></li><li><p>下列哪种说法是正确的()</p><p>A. 实例方法可直接调用超类的实例方法</p><p>B. 实例方法可直接调用超类的类方法</p><p>C. 实例方法可以直接调用其他类的实例方法</p><p>D. 实例方法可以直接调用本类的类方法</p></li><li><p>在Java中, 如果父类中的某些方法不包含任何逻辑, 并且需要由子类重写, 应该使用以下哪个关键字类声明父类的这些方法()</p><p>A. final</p><p>B. static</p><p>C. abstract</p><p>D. void</p></li><li><p>当编译并运行下面程序时会发生什么结果()</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Hope</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String argv[])</span> </span>&#123;</span><br><span class="line">        Hope hope = <span class="keyword">new</span> Hope();</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="title">Hope</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">            System.out.println(i);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>A. 编译错误, 构造方法不能被声明为protected</p><p>B. 运行错误, 构造方法不能被声明为protected</p><p>C. 编译并运行输出0到10</p><p>D. 编译并运行输出0到9</p></li><li><p>在Java中, 下列()类不能派生出子类()</p><p>A. public class MyClass{}</p><p>B. class MyClass{}</p><p>C. abstract class MyClass{}</p><p>D. final class MyClass{}</p></li><li><p>启动一个线程, 应调用什么方法() </p><p>A. start()</p><p>B. run()</p><p>C. begin()</p><p>D. notify()</p></li><li><p>哪些不属于高并发原则()</p><p>A. 无状态设计: 因为有状态可能涉及锁曹, 锁又可能导致并发的串行化;</p><p>B. 保持合理的颗粒, 无论拆分还是服务化, 其实就是服务粒度控制, 控制粒度为了分散请求, 提高并发, 成为了从管理等角度提高可操性</p><p>C. 系统的任何发布必须具有回滚能力</p><p>D. 缓存, 队列, 并发等技巧在高并发设计上可供参考, 但需依场景使用</p></li><li><p>哪些不属于负载均衡策略()</p><p>A. 轮询</p><p>B. ip, hash</p><p>C. 随机</p><p>D. 指定IP连接</p></li><li><p>下面哪个肯定不会导致CPU飙升()</p><p>A. JVM线程阻塞</p><p>B. 内存使用率100%</p><p>C. 网络延迟</p><p>D. 磁盘使用率100%</p></li><li><p>Prometheus原生不支持Eureka, 下面哪个是正确高效的解决方案()</p><p>A. 修改Eureka源码</p><p>B. 联系开源作者添加此功能</p><p>C. 寻找开源适配组件</p><p>D. 不做任何处理</p></li><li><p>在互联网领域, 下面哪个不是选择开源技术有效纬度()</p><p>A. 学习曲线或难度低</p><p>B. 成熟的老框架</p><p>C. 开源社区是否活跃</p><p>D. 文档是否丰富</p></li><li><p>当遇到高并发瓶颈是, 哪个不是最终的解决方案()</p><p>A. 使用高效的nosql开源系统</p><p>B. 同步接口提高异步批量接口</p><p>C. 单线程搞成线程池</p><p>D. 系统降级</p></li><li><p>怎样做到代码无侵入性的校验()</p><p>A. 在业务代码中编写校验代码</p><p>B. 修改业务代码逻辑</p><p>C. 编写拦截器进行校验</p><p>D. 使用适配器模式修改代码</p></li><li><p>哪个不属于云原生()</p><p>A. DevOps</p><p>B. 容器</p><p>C. 单体应用</p><p>D. 微服务</p></li><li><p>对于一个超大的linux文件, 要从里面寻找关键语句, 我们不会使用哪个命令()</p><p>A. vim</p><p>B. less</p><p>C. grep</p><p>D. more</p></li><li><p>下面哪个不是java.util, concurrent包下面的类()</p><p>A. ConcurrentHashMap</p><p>B. ArrayBlockingQueue</p><p>C. CountDownLatch</p><p>D. ArrayList</p></li></ol><h3 id="二-简答题"><a href="#二-简答题" class="headerlink" title="二. 简答题"></a>二. 简答题</h3><ol><li><p>简单介绍一下CAP理论</p></li><li><p>如何保证接口的幂等性</p></li><li><p>下面程序运行结果是什么</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Base</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> Base &#123;</span><br><span class="line">        System.out.println(<span class="string">"Base"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    &#123;</span><br><span class="line">        System.out.println(<span class="string">"I'm Base class"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">"static Base"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Sub</span> <span class="keyword">extends</span> <span class="title">Base</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Sub</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"Sub"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    &#123;</span><br><span class="line">        System.out.println(<span class="string">"I'm Sub class"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">"static Sub"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">new</span> Sub();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h3 id="三-数据库"><a href="#三-数据库" class="headerlink" title="三. 数据库"></a>三. 数据库</h3><p>为管理岗位业务培训信息, 建立三个表</p><div class="table-container"><table><thead><tr><th>S(S#, SN, SD, SA)</th><th>S#, SN, SD, SA分别代码学号, 姓名, 所属单位, 学员年龄</th></tr></thead><tbody><tr><td>C(C#, CN)</td><td>C#, CN分别代表课程编号, 课程名称</td></tr><tr><td>SC(S#, C#, G)</td><td>S#, C#, G分别代表学号, 所选修的课程编号, 学习成绩</td></tr></tbody></table></div><p>请写出如下SQL语句</p><ol><li>使用标准SQL嵌套语句查询选修课程名称为’税收基础’的学员学号和姓名</li><li>使用标准SQL嵌套语句查询选修课程编号为’C2’的学员姓名和所属单位</li></ol><h3 id="四-开放题"><a href="#四-开放题" class="headerlink" title="四. 开放题"></a>四. 开放题</h3><ol><li><p>微博中url往往很长, 发送前要转化为tinyurl</p><p>注:TinyURL是第一个专门提供缩略网址服务的网站, 他提供了一个短网址并转向指定的长网址, 网站最初是由Kevin Gilbertson所开发, 并于2002年1月开始提供服务</p><p>i. url如何转为tinyurl编码</p><p>ii. 如果用户输入一个已经转换过的URL，如何快速定位到已经生成了的tinyurl</p><p>iii. 如果数据为10亿条，需要10个tinyurl服务器，怎么设计？</p></li><li><p>当需要实现一个微服务系统时, 如何设计出来一个高并发高可用的系统?(可以根据自己之前做过的案例描述, 也可以根据自己的思路来编写, 也可以结合一些开源组件进行描述)</p></li></ol>]]></content>
      
      
      <categories>
          
          <category> Java面试题 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Java面试题22</title>
      <link href="/2019/04/16/Java%E9%9D%A2%E8%AF%95%E9%A2%9822/"/>
      <url>/2019/04/16/Java%E9%9D%A2%E8%AF%95%E9%A2%9822/</url>
      
        <content type="html"><![CDATA[<script src="https://ajax.aspnetcdn.com/ajax/jQuery/jquery-3.4.1.min.js"></script><div id="hbe-security">  <div class="hbe-input-container">  <input type="password" class="hbe-form-control" id="pass" placeholder="输入密码，查看文章" />    <label for="pass">输入密码，查看文章</label>    <div class="bottom-line"></div>  </div></div><div id="decryptionError" style="display: none;">Incorrect Password!</div><div id="noContentError" style="display: none;">No content to display!</div><div id="encrypt-blog" style="display:none"></div><script src="/lib/crypto-js.js"></script><script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
      
      
      <categories>
          
          <category> Java面试题 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>数据结构和算法5-缓存淘汰算法</title>
      <link href="/2018/11/13/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%92%8C%E7%AE%97%E6%B3%955-%E7%BC%93%E5%AD%98%E6%B7%98%E6%B1%B0%E7%AE%97%E6%B3%95/"/>
      <url>/2018/11/13/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%92%8C%E7%AE%97%E6%B3%955-%E7%BC%93%E5%AD%98%E6%B7%98%E6%B1%B0%E7%AE%97%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<h2 id="缓存淘汰算法"><a href="#缓存淘汰算法" class="headerlink" title="缓存淘汰算法"></a>缓存淘汰算法</h2><h3 id="什么是缓存"><a href="#什么是缓存" class="headerlink" title="什么是缓存"></a>什么是缓存</h3><p>缓存是一种提高数据读取性能的技术，在硬件设计、软件开发中都有着非常广泛的应用，比如常见的CPU缓存、数据库缓存、浏览器缓存等等。</p><h3 id="缓存淘汰策略"><a href="#缓存淘汰策略" class="headerlink" title="缓存淘汰策略"></a>缓存淘汰策略</h3><p>缓存的大小有限，当缓存被用满时，哪些数据应该被清理出去，哪些数据应该被保留?这就需要缓存淘汰策略来决定。</p><h3 id="常见的缓存淘汰策略"><a href="#常见的缓存淘汰策略" class="headerlink" title="常见的缓存淘汰策略"></a>常见的缓存淘汰策略</h3><ol><li>先进先出策略FIFO (First In，First Out)</li><li>最少使用策略LFU (Least Frequently Used)</li><li>最近最少使用策略LRU (Least Recently Used)</li></ol>]]></content>
      
      
      <categories>
          
          <category> 数据结构和算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据结构和算法 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>数据结构和算法4-链表</title>
      <link href="/2018/11/13/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%92%8C%E7%AE%97%E6%B3%954-%E9%93%BE%E8%A1%A8/"/>
      <url>/2018/11/13/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%92%8C%E7%AE%97%E6%B3%954-%E9%93%BE%E8%A1%A8/</url>
      
        <content type="html"><![CDATA[<h2 id="链表"><a href="#链表" class="headerlink" title="链表"></a>链表</h2><h3 id="什么是链表"><a href="#什么是链表" class="headerlink" title="什么是链表"></a>什么是链表</h3><p>链表不需要一块连续的内存空间，它通过“指针”将一组零散的内存块串联起来使用。其中，我们把内存块称为链表<br>的“结点”。为了将所有的结点串起来，每个链表的结点除了存储数据之外，还需要记录链上的下一个结点的地址。</p><h3 id="链表的优劣"><a href="#链表的优劣" class="headerlink" title="链表的优劣"></a>链表的优劣</h3><p>优点: 在链表插入和删除一个数据是非常快的, 只需要修改结点中存储的地址, 时间复杂度为O(1)</p><p>缺点: 随机访问某个元素, 效率比较低, 需要根据指针一个结点一个结点地依次遍历, 直到找到相应的结点。时间复杂度为O(n), 最好情况时间复杂度为O(1), 最坏情况时间复杂度为O(n), 平均时间复杂度为O(n)<br><img src="/2018/11/13/数据结构和算法4-链表/插入和删除.png"></p><h3 id="常见的链表"><a href="#常见的链表" class="headerlink" title="常见的链表"></a>常见的链表</h3><ol><li>单链表<br><img src="/2018/11/13/数据结构和算法4-链表/单链表.png"></li><li>双向链表<br><img src="/2018/11/13/数据结构和算法4-链表/双向链表.png"></li><li>循环链表<br><img src="/2018/11/13/数据结构和算法4-链表/循环链表.png"></li><li>双向循环链表<br><img src="/2018/11/13/数据结构和算法4-链表/双向循环链表.png"></li></ol><h3 id="设计思想"><a href="#设计思想" class="headerlink" title="设计思想"></a>设计思想</h3><p>空间换时间: 当内存空间充足的时候，如果我们更加追求代码的执行速度，我们就可以选择空间复杂度相对较高、但时间复杂度相对很低的算法或者数据结构。<br>时间换空间: 如果内存比较紧缺, 比如代码跑在手机或者单片机上，这个时候，就要反过来用时间换空间的设计思路。</p>]]></content>
      
      
      <categories>
          
          <category> 数据结构和算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据结构和算法 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>数据结构和算法3-数组</title>
      <link href="/2018/11/13/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%92%8C%E7%AE%97%E6%B3%953-%E6%95%B0%E7%BB%84/"/>
      <url>/2018/11/13/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%92%8C%E7%AE%97%E6%B3%953-%E6%95%B0%E7%BB%84/</url>
      
        <content type="html"><![CDATA[<h2 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h2><h3 id="线性表"><a href="#线性表" class="headerlink" title="线性表"></a>线性表</h3><p>线性表(Linear List)就是数据排成像一条线一样的结构。每个线性表上的数据最多只有前和后两个方向。图中是常见的线性表结构</p><p><img src="/2018/11/13/数据结构和算法3-数组/线性表.png"></p><h3 id="非线性表"><a href="#非线性表" class="headerlink" title="非线性表"></a>非线性表</h3><p>非线性表中数据之间并不是简单的前后关系。图中是常见的非线性表结构</p><p><img src="/2018/11/13/数据结构和算法3-数组/非线性表@2x.png"></p><h3 id="什么是数组"><a href="#什么是数组" class="headerlink" title="什么是数组"></a>什么是数组</h3><p>数组不仅仅是一种编程语言中的数据类型, 还是一种最基础的数据结构。数组(Array)是一种线性表数据结构。它用一组连续的内存空间，来存储一组具有相同类型的数据。</p><h3 id="数组的特点"><a href="#数组的特点" class="headerlink" title="数组的特点:"></a>数组的特点:</h3><ol><li>连续的内存空间</li><li>相同类型的数据</li></ol><h3 id="数组的优劣"><a href="#数组的优劣" class="headerlink" title="数组的优劣"></a>数组的优劣</h3><p>优点: 数组因为在内存中连续存储, 随机获取数组的某个元素, 时间复杂度为O(1)</p><p>缺点: 数组因为在内存中连续存储, 要想在数组中删除、插入一个数据，为了保证连续性，就需要做大量的数据搬移工作。时间复杂度为O(n), 最好情况时间复杂度为O(1), 最坏情况时间复杂度为O(n), 平均时间复杂度为O(n) </p><blockquote><p>注: 由于删除会导致整体的数据的移动, 所有通过标记删除的方式(只是在逻辑上删除, 实际数据还在)来降低时间复杂度. 其中JVM的算法也用到了这种思想, 可以看一下<a href="https://www.cnblogs.com/1024Community/p/honery.html" target="_blank" rel="noopener">扒一扒JVM的垃圾回收机制，下次面试你准备好了吗</a> </p></blockquote><h3 id="数组越界"><a href="#数组越界" class="headerlink" title="数组越界"></a>数组越界</h3><p>所谓的数组越界，简单地讲就是指数组下标变量的取值超过了初始定义时的大小，导致对数组元素的访问出现在数组的范围之外</p><p>由于 C 语言并不具有类似 Java等语言中现有的静态分析工具的功能(可以对程序中数组下标取值范围进行严格检查，一旦发现数组上溢或下溢，都会因抛出异常而终止程序)。也就是说，C 语言并不检验数组边界，数组的两端都有可能越界，从而使其他变量的数据甚至程序代码被破坏。</p><h3 id="容器类和数组的选择"><a href="#容器类和数组的选择" class="headerlink" title="容器类和数组的选择?"></a>容器类和数组的选择?</h3><ol><li>Java ArrayList无法存储基本类型，比如int、long,需要封装为Integer、Long 类，而自动装箱(Autoboxing)、拆箱(Unboxing) 则有一定的性能消耗，所以如果特别关注性能，或者希望使用基本类型，就可以选用数组。</li><li>如果数据大小事先已知，并且对数据的操作非常简单，用不到ArrayList提供的大部分方法，也可以直接使用数组。</li><li>对于业务开发，直接使用容器就足够了，省时省力。毕竟损耗一丢丢性能，完全不会影响到系统整体的性能。但如果你是做一些非常底层的开发，比如开发网络框架，性能的优化需要做到极致，这个时候数组就会优于容器，成为首选。</li></ol>]]></content>
      
      
      <categories>
          
          <category> 数据结构和算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据结构和算法 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>数据结构和算法2-时间、空间复杂度分析</title>
      <link href="/2018/11/12/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%92%8C%E7%AE%97%E6%B3%952-%E6%97%B6%E9%97%B4%E3%80%81%E7%A9%BA%E9%97%B4%E5%A4%8D%E6%9D%82%E5%BA%A6%E5%88%86%E6%9E%90/"/>
      <url>/2018/11/12/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%92%8C%E7%AE%97%E6%B3%952-%E6%97%B6%E9%97%B4%E3%80%81%E7%A9%BA%E9%97%B4%E5%A4%8D%E6%9D%82%E5%BA%A6%E5%88%86%E6%9E%90/</url>
      
        <content type="html"><![CDATA[<h1 id="时间、空间复杂度分析"><a href="#时间、空间复杂度分析" class="headerlink" title="时间、空间复杂度分析"></a>时间、空间复杂度分析</h1><h3 id="时间、空间复杂度分析的作用"><a href="#时间、空间复杂度分析的作用" class="headerlink" title="时间、空间复杂度分析的作用?"></a>时间、空间复杂度分析的作用?</h3><p>数据结构和算法本身解决的是“快”和“省”的问题，即如何让代码运行得更快， 如何让代码更省存储空间。所以，执行效率是算法一个非常重要的考量指标。衡量代码的执行效率的指标就是时间、空间复杂度分析。</p><h3 id="时间、空间复杂度分析的方法-大O复杂度表示法"><a href="#时间、空间复杂度分析的方法-大O复杂度表示法" class="headerlink" title="时间、空间复杂度分析的方法: 大O复杂度表示法"></a>时间、空间复杂度分析的方法: 大O复杂度表示法</h3><h3 id="时间复杂度分析"><a href="#时间复杂度分析" class="headerlink" title="时间复杂度分析"></a>时间复杂度分析</h3><p>大O时间复杂度实际上并不具体表示代码真正的执行时间，而是表示代码执行时间随数据规模增长的变化趋势，所以，也叫作渐进时间复杂度(asymptotic time complexity)，简称时间复杂度。大O复杂度表示法总结成一个公式:</p><script type="math/tex; mode=display">T(n) = O(f(n))</script><blockquote><p>其中，T(n) 表示代码执行的时间; n表示数据规模的大小; f(n) 表示每行代码执行的次数总和。因为这是一个公式，所以用f(n)来表示。公式中的O表示代码的执行时间T(n)与f(n)表达式成正比。</p></blockquote><p>我们通过一个例子来用一下公式:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 假设每行代码执行的时间都一样，为unit_time</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">cal</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 执行花了1个unit_time</span></span><br><span class="line">    <span class="keyword">int</span> sum = <span class="number">0</span>;</span><br><span class="line">    <span class="comment">// 执行花了1个unit_time</span></span><br><span class="line">    <span class="keyword">int</span> i = <span class="number">1</span>;</span><br><span class="line">    <span class="comment">// 执行花了n个unit_time</span></span><br><span class="line">    <span class="keyword">for</span> (; i &lt;= n; ++i) &#123;</span><br><span class="line">        <span class="comment">// 执行花了n个unit_time</span></span><br><span class="line">        sum = sum + i;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 执行花了1个unit_time</span></span><br><span class="line">    <span class="keyword">return</span> sum;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 整体执行花了(2n + 3)个unit_time, 所有代码的执行时间T(n)与每行代码的执行次数(2n + 3)成正比。</span></span><br></pre></td></tr></table></figure><p>这个规律总结成一个公式:</p><script type="math/tex; mode=display">T(n) = O(2n + 3)</script><p>当n很大时，你可以把它想象成10000、100000。而公式中的低阶、常量、系数三部分并不左右增长趋势，所以都可以忽略。可以把公式变为: </p><script type="math/tex; mode=display">T(n) = O(n)</script><h3 id="时间复杂度的实用技巧"><a href="#时间复杂度的实用技巧" class="headerlink" title="时间复杂度的实用技巧"></a>时间复杂度的实用技巧</h3><ol><li><p>只关注循环执行次数最多的一段代码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 假设每行代码执行的时间都一样，为unit_time</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">cal</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 执行花了1个unit_time, 常数级忽略</span></span><br><span class="line">    <span class="keyword">int</span> sum = <span class="number">0</span>;</span><br><span class="line">    <span class="comment">// 执行花了1个unit_time, 常数级忽略</span></span><br><span class="line">    <span class="keyword">int</span> i = <span class="number">1</span>;</span><br><span class="line">    <span class="comment">// 执行花了n个unit_time</span></span><br><span class="line">    <span class="keyword">for</span> (; i &lt;= n; ++i) &#123;</span><br><span class="line">        <span class="comment">// 执行花了n个unit_time</span></span><br><span class="line">        sum = sum + i;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 执行花了1个unit_time, 常数级忽略</span></span><br><span class="line">    <span class="keyword">return</span> sum;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 最大执行时间为: n个unit_time, 所以总的时间复杂度为O(n)</span></span><br></pre></td></tr></table></figure></li><li><p>加法法则:总复杂度等于量级最大的那段代码的复杂度</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 假设每行代码执行的时间都一样，为unit_time</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">cal</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 执行花了1个unit_time, 常数级忽略</span></span><br><span class="line">    <span class="keyword">int</span> sum_1 = <span class="number">0</span>;</span><br><span class="line">    <span class="comment">// 执行花了1个unit_time, 常数级忽略</span></span><br><span class="line">    <span class="keyword">int</span> p = <span class="number">1</span>;</span><br><span class="line">    <span class="comment">// 执行花了n个unit_time</span></span><br><span class="line">    <span class="keyword">for</span> (; p &lt; <span class="number">100</span>; ++p) &#123;</span><br><span class="line">        <span class="comment">// 执行花了1*n个unit_time</span></span><br><span class="line">        sum_1 = sum_1 + p;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 最大执行时间为: n个unit_time, 所以第一段的总的时间复杂度为O(n)</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 执行花了1个unit_time, 常数级忽略</span></span><br><span class="line">    <span class="keyword">int</span> sum_2 = <span class="number">0</span>;</span><br><span class="line">    <span class="comment">// 执行花了1个unit_time, 常数级忽略</span></span><br><span class="line">    <span class="keyword">int</span> q = <span class="number">1</span>;</span><br><span class="line">    <span class="comment">// 执行花了n个unit_time</span></span><br><span class="line">    <span class="keyword">for</span> (; q &lt; n; ++q) &#123;</span><br><span class="line">        <span class="comment">// 执行花了1*n个unit_time</span></span><br><span class="line">        sum_2 = sum_2 + q;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 最大执行时间为: n个unit_time, 所以第二段的总的时间复杂度为O(n)</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 执行花了1个unit_time, 常数级忽略</span></span><br><span class="line">    <span class="keyword">int</span> sum_3 = <span class="number">0</span>;</span><br><span class="line">    <span class="comment">// 执行花了1个unit_time, 常数级忽略</span></span><br><span class="line">    <span class="keyword">int</span> i = <span class="number">1</span>;</span><br><span class="line">    <span class="comment">// 执行花了1个unit_time, 常数级忽略</span></span><br><span class="line">    <span class="keyword">int</span> j = <span class="number">1</span>;</span><br><span class="line">    <span class="comment">// 执行花了n个unit_time</span></span><br><span class="line">    <span class="keyword">for</span> (; i &lt;= n; ++i) &#123;</span><br><span class="line">        <span class="comment">// 执行花了1*n个unit_time</span></span><br><span class="line">        j = <span class="number">1</span>;</span><br><span class="line">        <span class="comment">// 执行花了n*n个unit_time</span></span><br><span class="line">        <span class="keyword">for</span> (; j &lt;= n; ++j) &#123;</span><br><span class="line">            <span class="comment">// 执行花了n*n个unit_time</span></span><br><span class="line">            sum_3 = sum_3 + i * j;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 最大执行时间为: n*n个unit_time, 所以第三段的总的时间复杂度为O(n*n)</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 执行花了1个unit_time, 常数级忽略</span></span><br><span class="line">    <span class="keyword">return</span> sum_1 + sum_2 + sum_3;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 综合三段代码的复杂度, 取最大执行时间为: n*n个unit_time, 所以总的时间复杂度为O(n*n)</span></span><br></pre></td></tr></table></figure></li><li><p>乘法法则:嵌套代码的复杂度等于嵌套内外代码复杂度的乘积</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">f</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 执行花了1个unit_time, 常数级忽略</span></span><br><span class="line">    <span class="keyword">int</span> sum = <span class="number">0</span>;</span><br><span class="line">    <span class="comment">// 执行花了1个unit_time, 常数级忽略</span></span><br><span class="line">    <span class="keyword">int</span> i = <span class="number">1</span>;</span><br><span class="line">    <span class="comment">// 执行花了n个unit_time</span></span><br><span class="line">    <span class="keyword">for</span> (; i &lt; n; ++i) &#123;</span><br><span class="line">        <span class="comment">// 执行花了1*n个unit_time</span></span><br><span class="line">        sum = sum + i;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 执行花了1个unit_time, 常数级忽略</span></span><br><span class="line">    <span class="keyword">return</span> sum;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// f()的最大执行时间为: n个unit_time, 时间复杂度为T(n)</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">cal</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 执行花了1个unit_time, 常数级忽略</span></span><br><span class="line">    <span class="keyword">int</span> ret = <span class="number">0</span>;</span><br><span class="line">    <span class="comment">// 执行花了1个unit_time, 常数级忽略</span></span><br><span class="line">    <span class="keyword">int</span> i = <span class="number">1</span>;</span><br><span class="line">    <span class="comment">// 执行花了n个unit_time</span></span><br><span class="line">    <span class="keyword">for</span> (; i &lt; n; ++i) &#123;</span><br><span class="line">        <span class="comment">// 执行花了n*n个unit_time</span></span><br><span class="line">        ret = ret + f(i);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 执行花了1个unit_time, 常数级忽略</span></span><br><span class="line">    <span class="keyword">return</span> ret;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// cal()的最大执行时间为: n*n个unit_time, 时间复杂度为T(n*n)</span></span><br></pre></td></tr></table></figure></li></ol><h3 id="常见的时间复杂度"><a href="#常见的时间复杂度" class="headerlink" title="常见的时间复杂度"></a>常见的时间复杂度</h3><ol><li><p>$O(1)$</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 假设每行代码执行的时间都一样，为unit_time</span></span><br><span class="line"><span class="comment">// 执行花了1个unit_time</span></span><br><span class="line"><span class="keyword">int</span> i = <span class="number">8</span>;</span><br><span class="line"><span class="comment">// 执行花了1个unit_time</span></span><br><span class="line"><span class="keyword">int</span> j = <span class="number">6</span>;</span><br><span class="line"><span class="comment">// 执行花了1个unit_time</span></span><br><span class="line"><span class="keyword">int</span> sum = i + j;</span><br><span class="line"><span class="comment">// 这段代码，即便有3行，它的时间复杂度也是0(1), 而不是0(3)。0(1)只是常量级时间复杂度的一种表示方法，并不是指只执行了一行代码。</span></span><br></pre></td></tr></table></figure></li><li><p>$O(log n)$ 和 $O(nlogn)$</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 假设每行代码执行的时间都一样，为unit_time</span></span><br><span class="line"><span class="comment">// 执行花了1个unit_time</span></span><br><span class="line"><span class="keyword">int</span> i = <span class="number">1</span>;</span><br><span class="line"><span class="comment">// 假设执行了x个unit_time, 2的x次方等于n, x就等于log2n</span></span><br><span class="line"><span class="keyword">while</span> (i &lt;= n) &#123;</span><br><span class="line">    <span class="comment">// 执行次数等同于while循环</span></span><br><span class="line">    i *= <span class="number">2</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 整体的执行次数为log2n</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 假设每行代码执行的时间都一样，为unit_time</span></span><br><span class="line"><span class="comment">// 执行花了1个unit_time</span></span><br><span class="line"><span class="keyword">int</span> i = <span class="number">1</span>;</span><br><span class="line"><span class="comment">// 假设执行了x个unit_time, 3的x次方等于n, x就等于log3n</span></span><br><span class="line"><span class="keyword">while</span> (i &lt;= n) &#123;</span><br><span class="line">    <span class="comment">// 执行次数等同于while循环</span></span><br><span class="line">    i *= <span class="number">3</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 整体的执行次数为log3n</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 整体的执行次数为log2n或log3n, 所有对数的时间复杂度都记为logn</span></span><br></pre></td></tr></table></figure></li><li><p>$O(m+n)$ 和 $O(m*n)$</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">cal</span><span class="params">(<span class="keyword">int</span> m, <span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 执行花了1个unit_time, 常数级忽略</span></span><br><span class="line">    <span class="keyword">int</span> sum_1 = <span class="number">0</span>;</span><br><span class="line">    <span class="comment">// 执行花了1个unit_time, 常数级忽略</span></span><br><span class="line">    <span class="keyword">int</span> i = <span class="number">1</span>;</span><br><span class="line">    <span class="comment">// 执行花了m个unit_time</span></span><br><span class="line">    <span class="keyword">for</span> (; i &lt; m; ++i) &#123;</span><br><span class="line">        <span class="comment">// 执行花了1*m个unit_time</span></span><br><span class="line">        sum_1 = sum_1 + i;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 执行花了1个unit_time, 常数级忽略</span></span><br><span class="line">    <span class="keyword">int</span> sum_2 = <span class="number">0</span>;</span><br><span class="line">    <span class="comment">// 执行花了1个unit_time, 常数级忽略</span></span><br><span class="line">    <span class="keyword">int</span> j = <span class="number">1</span>;</span><br><span class="line">    <span class="comment">// 执行花了n个unit_time</span></span><br><span class="line">    <span class="keyword">for</span> (; j &lt; n; ++j) &#123;</span><br><span class="line">        <span class="comment">// 执行花了1*n个unit_time</span></span><br><span class="line">        sum_2 = sum_2 + j;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 执行花了1个unit_time, 常数级忽略</span></span><br><span class="line">    <span class="keyword">return</span> sum_1 + sum_2;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 因为m和n的大小无法确定, 时间复杂度为O(m+n)</span></span><br></pre></td></tr></table></figure></li></ol><h3 id="空间复杂度分析"><a href="#空间复杂度分析" class="headerlink" title="空间复杂度分析"></a>空间复杂度分析</h3><p>类比一下，空间复杂度全称就是渐进空间复杂度<br>(asymptotic space complexity) ,表示算法的存储空间与数据规模之间的增长关系。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 假设每个数据所占的空间都一样，为unit_store</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">print</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 申请了1个unit_store, 常数级忽略</span></span><br><span class="line">    <span class="keyword">int</span> i = <span class="number">0</span>;</span><br><span class="line">    <span class="comment">// 申请了n个unit_store</span></span><br><span class="line">    <span class="keyword">int</span>[] a = <span class="keyword">new</span> <span class="keyword">int</span>[n];</span><br><span class="line">    <span class="keyword">for</span> (; i &lt; n; ++i) &#123;</span><br><span class="line">        a[i] = i * i;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(i = n - <span class="number">1</span>; i &gt;= <span class="number">0</span>; --i) &#123;</span><br><span class="line">        System.out.println(a[i]);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 整段代码的空间复杂度为O(n)</span></span><br></pre></td></tr></table></figure><p>我们常见的空间复杂度就是O(1)、O(n)、O(n2), 像O(logn)、O(nlogn) 这样的对数阶复杂度平时都用不到。</p><h3 id="最好情况时间复杂度、最坏情况时间复杂度和平均情况时间复杂度"><a href="#最好情况时间复杂度、最坏情况时间复杂度和平均情况时间复杂度" class="headerlink" title="最好情况时间复杂度、最坏情况时间复杂度和平均情况时间复杂度"></a>最好情况时间复杂度、最坏情况时间复杂度和平均情况时间复杂度</h3><p>为了表示代码在不同情况下的不同时间复杂度, 我们需要引入三个概念:最好情况时间复杂度、最坏情况时间复杂度和平均情况时间复杂度。</p><p>最好情况时间复杂度就是，在最理想的情况下，执行这段代码的时间复杂度。</p><p>最坏情况时间复杂度就是，在最糟糕的情况下，执行这段代码的时间复杂度。</p><p>平均时间复杂度的全称应该叫加权平均时间复杂度或者期望时间复杂度。即每种情况的执行次数 * 每种情况的概率的总和</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 假设每行代码执行的时间都一样，为unit_time</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">find</span><span class="params">(<span class="keyword">int</span>[] array, <span class="keyword">int</span> n, <span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 执行花了1个unit_time, 常数级忽略</span></span><br><span class="line">    <span class="keyword">int</span> i = <span class="number">0</span>;</span><br><span class="line">    <span class="comment">// 执行花了1个unit_time, 常数级忽略</span></span><br><span class="line">    <span class="keyword">int</span> pos = -<span class="number">1</span>;</span><br><span class="line">    <span class="comment">// 不同的情况下，这行代码的时间复杂度是不一样的</span></span><br><span class="line">    <span class="comment">// 最好的情况为第一次就找到了, 最好情况时间复杂度为O(1)</span></span><br><span class="line">    <span class="comment">// 最坏的情况为最后一次才找到了, 最坏情况时间复杂度为O(n)</span></span><br><span class="line">    <span class="comment">// 平均时间复杂度= 1*(1/2n) + 2*(1/2n) + 3*(1/2n) + ... + (n-1)*(1/2n) + n*(1/2n) = (3n+1)/4, 最终为O(n)</span></span><br><span class="line">    <span class="keyword">for</span> (; i &lt; n; ++i) &#123;</span><br><span class="line">        <span class="keyword">if</span> (array[i] == x) &#123;</span><br><span class="line">            pos = i;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> pos;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="均摊时间复杂度"><a href="#均摊时间复杂度" class="headerlink" title="均摊时间复杂度"></a>均摊时间复杂度</h3><p>均摊时间复杂度和平均时间复杂度，前者是一个序列的操作取平均值，后者是针对不同输入来计算平均值</p><p>注: <a href="https://blog.csdn.net/huangwwu11/article/details/27797087" target="_blank" rel="noopener">常见的均摊时间复杂度的方法</a></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span>[] array = <span class="keyword">new</span> <span class="keyword">int</span>[n];</span><br><span class="line"><span class="keyword">int</span> count = <span class="number">0</span>;</span><br><span class="line"><span class="comment">// 假设每行代码执行的时间都一样，为unit_time</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">insert</span><span class="params">(<span class="keyword">int</span> val)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 执行花了1个unit_time, 常数级忽略</span></span><br><span class="line">    <span class="comment">// if语句有可能执行, 有可能不执行</span></span><br><span class="line">    <span class="keyword">if</span> (count == array.length) &#123;</span><br><span class="line">        <span class="comment">// 执行花了1个unit_time, 常数级忽略</span></span><br><span class="line">        <span class="keyword">int</span> sum = <span class="number">0</span>;</span><br><span class="line">        <span class="comment">// 执行花了n个unit_time</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; array.length; i++) &#123;</span><br><span class="line">            <span class="comment">// 执行花了1*n个unit_time</span></span><br><span class="line">            sum += array[i];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 执行花了1个unit_time, 常数级忽略</span></span><br><span class="line">        array[<span class="number">0</span>] = sum;</span><br><span class="line">        <span class="comment">// 执行花了1个unit_time, 常数级忽略</span></span><br><span class="line">        count = <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 执行花了1个unit_time, 常数级忽略</span></span><br><span class="line">    array[count] = val;</span><br><span class="line">    <span class="comment">// 执行花了1个unit_time, 常数级忽略</span></span><br><span class="line">    ++count;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>总结</p><p>最大的执行时间为n个unit_time, <strong>时间复杂度</strong>为O(n)<br>最好情况是数组有空间, 可以直接插入, <strong>最好情况时间复杂度</strong>为O(1)<br>最坏情况是数组没有有空间, 需要先把数组的和存入第一个位置, 把值插入第二个位置, <strong>最坏情况时间复杂度</strong>为O(n)<br>前n-1次都是O(1), 最后一次是O(n), 平均时间复杂度</p><script type="math/tex; mode=display">1*\frac{1}{n+1}+1*\frac{1}{n+1}+...+1*\frac{1}{n+1}+n*\frac{1}{n+1}=\frac{2n-1}{n+1}=O(1)</script><p>使用累积法分析, 均衡时间复杂度=每一次的操作数之和, 再取平均值</p><script type="math/tex; mode=display">\frac{1+1+...+1+n}{n}=\frac{2n-1}{n}=O(1)</script><p>练习</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> array[] = <span class="keyword">new</span> <span class="keyword">int</span>[n];</span><br><span class="line"><span class="keyword">int</span> i = <span class="number">0</span>;</span><br><span class="line"><span class="comment">// 假设每行代码执行的时间都一样，为unit_time</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> element)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 执行花了1个unit_time, 常数级忽略</span></span><br><span class="line">    <span class="keyword">if</span> (i &gt;= n) &#123;</span><br><span class="line">        <span class="comment">// 执行花了1个unit_time, 常数级忽略</span></span><br><span class="line">        <span class="keyword">int</span> new_array[] = <span class="keyword">new</span> <span class="keyword">int</span>[n * <span class="number">2</span>];</span><br><span class="line">        <span class="comment">// 执行花了n个unit_time</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; n; j++) &#123;</span><br><span class="line">            <span class="comment">// 执行花了1*n个unit_time</span></span><br><span class="line">            new_array[j] = array[j];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 执行花了1个unit_time, 常数级忽略</span></span><br><span class="line">        array = new_array;</span><br><span class="line">        <span class="comment">// 执行花了1个unit_time, 常数级忽略</span></span><br><span class="line">        n *= <span class="number">2</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 执行花了1个unit_time, 常数级忽略</span></span><br><span class="line">    array[i] = element;</span><br><span class="line">    <span class="comment">// 执行花了1个unit_time, 常数级忽略</span></span><br><span class="line">    ++i;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>总结</p><p>最大的执行时间为n个unit_time, 时间复杂度为O(n)<br>最好情况是数组有空间, 可以直接插入, 最好情况时间复杂度为O(1)<br>最坏情况是数组没有有空间, 需要先把数组的值存入新的数组, 把值插入到最后, 最坏情况时间复杂度为O(n)<br>前n-1次都是O(1), 最后一次是O(n), 平均时间复杂度</p><script type="math/tex; mode=display">1*\frac{1}{n+1}+1*\frac{1}{n+1}+...+1*\frac{1}{n+1}+n*\frac{1}{n+1}=\frac{2n-1}{n+1}=O(1)</script><p>使用累积法分析, 均衡时间复杂度=每一次的操作数之和, 再取平均值</p><script type="math/tex; mode=display">\frac{1+1+...+1+n}{n}=\frac{2n-1}{n}=O(1)</script>]]></content>
      
      
      <categories>
          
          <category> 数据结构和算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据结构和算法 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>数据结构和算法1-概要</title>
      <link href="/2018/11/12/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%92%8C%E7%AE%97%E6%B3%951-%E6%A6%82%E8%A6%81/"/>
      <url>/2018/11/12/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%92%8C%E7%AE%97%E6%B3%951-%E6%A6%82%E8%A6%81/</url>
      
        <content type="html"><![CDATA[<h1 id="WHAT、HOW、WHY"><a href="#WHAT、HOW、WHY" class="headerlink" title="WHAT、HOW、WHY"></a>WHAT、HOW、WHY</h1><h3 id="什么是数据结构和算法"><a href="#什么是数据结构和算法" class="headerlink" title="什么是数据结构和算法?"></a>什么是数据结构和算法?</h3><p>从广义上讲，数据结构就是指一组数据的存储结构。算法就是操作数据的一组方法。</p><p>从狭义上讲，是指某些著名的数据结构和算法，比如队列、栈、堆、二分查找、动态规划等。这些都是前人智慧的结晶，我们可以直接拿来用。我们要讲的这些经典数据结构和算法，都是前人从很多实际操作场景中抽象出来的，经过非常多的求证和检验，可以高效地帮助我们解决很多实际的开发问题。</p><h3 id="数据结构和算法有什么关系呢"><a href="#数据结构和算法有什么关系呢" class="headerlink" title="数据结构和算法有什么关系呢?"></a>数据结构和算法有什么关系呢?</h3><p>数据结构和算法是相辅相成的。数据结构是为算法服务的，算法要作用在特定的数据结构之上。因此，我们无法孤立数据结构来讲算法，也无法孤立算法来讲数据结构。</p><h3 id="为什么要学习数据结构和算法"><a href="#为什么要学习数据结构和算法" class="headerlink" title="为什么要学习数据结构和算法?"></a>为什么要学习数据结构和算法?</h3><ol><li><p>很多大公司，比如BAT、Google、 Facebook， 面试的时候都喜欢考算法， 让人现场写代码。</p></li><li><p>作为业务开发，我们会用到各种框架、中间件和底层系统，比如Spring、RPC 框架、消息中间件、Redis 等等。在这些基础框架中， 一般都揉和了很多基础数据结构和算法的设计思想。掌握数据结构和算法，不管对于阅读框架源码，还是理解其背后的设计思想，都是非常有用的。</p></li><li><p>高手之间的竞争其实就在细节。这些细节包括:你用的算法是不是够优化，数据存取的效率是不是够高，内存是不是够节省等等。这些累积起来，决定了一个框架是不是优秀。所以，如果你还不懂数据结构和算法，没听说过复杂度分析，不知道怎么分析代码的时间复杂度和空间复杂度，那肯定说不过去了。</p></li><li><p>数据结构和算法这个东西，如果你不去学，可能真的这辈子都用不到，也感受不到它的好。但是一旦掌握，你就会常常被它的强大威力所折服。之前你可能需要费很大劲儿来优化的代码，需要花很多心思来设计的架构，用了数据结构和算法之后，很容易就可以解决了。</p></li></ol><h3 id="如何高效的学习数据结构和算法"><a href="#如何高效的学习数据结构和算法" class="headerlink" title="如何高效的学习数据结构和算法?"></a>如何高效的学习数据结构和算法?</h3><ol><li><p>学习20个最常用的、最基础的数据结构与算法，足以应付面试和工作需要。这里面有10个数据结构:数组、链表、栈、队列、散列表、二叉树、堆、跳表、图、Trie树; 10个算法:递归、排序、二分查找、搜索、哈希算法、贪心算法、分治算法、回溯算法、动态规划、字符串匹配算法。</p></li><li><p>自己用代码实现数据结构和算法。</p></li><li><p>找到几个人一起学习，一块讨论切磋。</p></li><li><p>给自己设定任务和目标， 增强学习的快感。</p></li><li><p>多复习和总结。</p></li></ol>]]></content>
      
      
      <categories>
          
          <category> 数据结构和算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据结构和算法 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>面试技巧集合</title>
      <link href="/2018/11/10/%E9%9D%A2%E8%AF%95%E6%8A%80%E5%B7%A7%E9%9B%86%E5%90%88/"/>
      <url>/2018/11/10/%E9%9D%A2%E8%AF%95%E6%8A%80%E5%B7%A7%E9%9B%86%E5%90%88/</url>
      
        <content type="html"><![CDATA[<h2 id="面试技巧集合"><a href="#面试技巧集合" class="headerlink" title="面试技巧集合"></a>面试技巧集合</h2><p><a href="https://www.cnblogs.com/rese-t/p/8016852.html" target="_blank" rel="noopener">java如何填写简历？（干货篇）</a></p><p><a href="https://blog.csdn.net/wan23333/article/details/78847204" target="_blank" rel="noopener">程序员这样面试，拿到offer的几率是80%</a></p><p><a href="https://www.cnblogs.com/steed/articles/7844888.html" target="_blank" rel="noopener">牛逼程序员面试总结</a></p><p><a href="https://blog.csdn.net/huangshulang1234/article/details/79112380" target="_blank" rel="noopener">HR最喜欢问程序员的10个问题</a></p><p><a href="https://gitbook.cn/books/5a6985f12a144149588739a5/index.html" target="_blank" rel="noopener">程序员跳槽时，如何高效地准备面试？</a></p><p><a href="https://www.cnblogs.com/JavaArchitect/p/7586949.html" target="_blank" rel="noopener">如何在面试中介绍自己的项目经验</a></p><p><a href="https://www.toutiao.com/i6660009697296253451/?tt_from=weixin&amp;utm_campaign=client_share&amp;wxshare_count=2&amp;from=singlemessage&amp;timestamp=1551057986&amp;app=news_article&amp;utm_source=weixin&amp;isappinstalled=0&amp;iid=64341639086&amp;utm_medium=toutiao_android&amp;group_id=6660009697296253451&amp;pbid=6643617410056488462" target="_blank" rel="noopener">程序员们面试时这样子介绍自己的项目经验，成功率能达到98.99%</a></p>]]></content>
      
      
      <categories>
          
          <category> 面试技巧 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 面试技巧 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Java面试题21</title>
      <link href="/2018/10/30/Java%E9%9D%A2%E8%AF%95%E9%A2%9821/"/>
      <url>/2018/10/30/Java%E9%9D%A2%E8%AF%95%E9%A2%9821/</url>
      
        <content type="html"><![CDATA[<ol><li><p>“static”关键字是什幺意思? Java中是否可以覆盖(override)一个private或者是static的方法?</p></li><li><p>Java中的方法覆盖(Overriding)和方法重载(Overloading)是什么意思?二者有什么不同。</p></li><li><p>接口和抽象类的区别是什么?接口中可以定义变量吗?</p></li><li><p>什么是值传递和引用传递?</p></li><li><p>创建线程有几种不同的方式?你喜欢哪一种?为什么?</p></li><li><p>Java集合类框架的基本接口有哪些?</p></li><li><p>关于StringBuilder,有以下说法，字符串拼接要用StringBuilder,不要用+，也不要用StringBuffer, 然<br>后性能就是最好的了，真的是这样吗?请说明+、stringbuilder. stringbuffer 适用的场景和各自的优缺点;</p></li><li><p>Java中堆和栈的区别，堆的结构是什么样子的?什么是堆中的永久代(Perm Gen space)?</p></li><li><p>在Java中，对象什么时候可以被垃圾回收?</p></li><li><p>阅读Shape和Circle两个类的定义。在序列化一个Circle的对象circle 到文件时，下 面哪个字段会被保<br>存到文件中?</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Shape</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> String name;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Circle</span> <span class="keyword">extends</span> <span class="title">Shape</span> <span class="keyword">implements</span> <span class="title">Serializable</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">float</span> radius;</span><br><span class="line">    <span class="keyword">transient</span> <span class="keyword">int</span> color;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> String type = <span class="string">"Circle"</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol>]]></content>
      
      
      <categories>
          
          <category> Java面试题 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Java面试题20</title>
      <link href="/2018/09/15/Java%E9%9D%A2%E8%AF%95%E9%A2%9820/"/>
      <url>/2018/09/15/Java%E9%9D%A2%E8%AF%95%E9%A2%9820/</url>
      
        <content type="html"><![CDATA[<p>高级工程师面试题(不用做完, 挑你最擅长的)</p><ol><li><p>阅读如下JavaScript脚本, 并选择输出结果()</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> c = &#123;<span class="attr">a</span>:<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;<span class="built_in">document</span>.write(<span class="number">1</span>);&#125;&#125;;</span><br><span class="line"><span class="keyword">var</span> d = c;</span><br><span class="line">c = &#123;<span class="attr">a</span>:<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;<span class="built_in">document</span>.write(<span class="number">2</span>);&#125;&#125;;</span><br><span class="line">c.a();</span><br><span class="line">d.a();</span><br></pre></td></tr></table></figure><p>A. 11</p><p>B. 12</p><p>C. 22</p><p>D. 21</p></li></ol><ol><li><p>如下代码输出结果:()</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">process</span><span class="params">(String str)</span> </span>&#123;</span><br><span class="line">    str = <span class="string">"A"</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">process</span><span class="params">(StringBuffer sb)</span> </span>&#123;</span><br><span class="line">    sb = <span class="keyword">new</span> StringBuffer();</span><br><span class="line">    sb.append(<span class="string">"A"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">process</span><span class="params">(String str, StringBuffer sb)</span> </span>&#123;</span><br><span class="line">    str = <span class="keyword">new</span> String(<span class="string">"A"</span>);</span><br><span class="line">    sb.append(<span class="string">"A"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    String str = <span class="string">"a"</span>;</span><br><span class="line">    StringBuffer sb = <span class="keyword">new</span> StringBuffer(<span class="string">"a"</span>);</span><br><span class="line">    process(str);</span><br><span class="line">    System.out.println(str);</span><br><span class="line">    process(sb);</span><br><span class="line">    System.out.println(sb);</span><br><span class="line">    process(str, sb);</span><br><span class="line">    System.out.println(str);</span><br><span class="line">    System.out.println(sb);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>A. A        aA         A        aA</p><p>B. a        aA        a        aA</p><p>C. a        a        a        aA</p><p>D. a        a        a        a</p><p>E. A        A        A        A</p></li></ol><ol><li>有一个int型数组的内容为[8,12,1,3,15,32,100,86], 用JAVA或C#写一个排序方法，排完后数组的内容会从小到大排列:[1,3,8,12,15,32.86, 100]。</li></ol><ol><li>数字推理题:观察数字下列数字:<br>1、5、11、19、 29、 …..这列数中第10个数是多少?第100个数是多少? (写出案即可，不用写程序)</li></ol><ol><li>读取并打印/tmp/目录下所有文件名的路径,用递归算法列所有子目录下文件路径, 获取文件列表可以用findfile(),获取目录列表可以用函数finddir(),不需要完整的函数,用类JAVA或类C#语言即可.</li></ol><ol><li>摸奖游戏:密封箱子里有3个红球，3个白球，玩家闭上眼睛从里面抓出了个球来，如果抓出来的3个球都为红球，或者都为白球就算中奖，请问中奖的概率是多少?</li></ol><ol><li>数据库编程题<ol><li>如何查找和删除数据库中重复数据</li><li>有如下表记录, 用一句SQL查询出每个用户最近次登陆的记录(每个用户只显示一条最近登陆记录)</li></ol></li></ol><div class="table-container"><table><thead><tr><th>Id</th><th>Name</th><th>Email</th><th>LastLogon</th></tr></thead><tbody><tr><td>100</td><td>test4</td><td>test4@yahoo.cn</td><td>2007-11-25 16:31:26</td></tr><tr><td>13</td><td>test1</td><td>test1@yahoo.cn</td><td>2008-10-21 17:21:23</td></tr><tr><td>19</td><td>test1</td><td>test1@yahoo.cn</td><td>2007-09-19 18:30:32</td></tr><tr><td>42</td><td>test2</td><td>test2@yahoo.cn</td><td>2008-08-08 10:21:23</td></tr><tr><td>23</td><td>test2</td><td>test2@yahoo.cn</td><td>2007-02-21 14:23:12</td></tr></tbody></table></div>]]></content>
      
      
      <categories>
          
          <category> Java面试题 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Java面试题19</title>
      <link href="/2018/09/15/Java%E9%9D%A2%E8%AF%95%E9%A2%9819/"/>
      <url>/2018/09/15/Java%E9%9D%A2%E8%AF%95%E9%A2%9819/</url>
      
        <content type="html"><![CDATA[<p>SQL题</p><ol><li>下列两张是学生表和成绩表:</li></ol><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> student;</span><br></pre></td></tr></table></figure><div class="table-container"><table><thead><tr><th>code</th><th>name</th><th>age</th></tr></thead><tbody><tr><td>1</td><td>武松</td><td>22</td></tr><tr><td>2</td><td>貂蝉</td><td>18</td></tr><tr><td>3</td><td>赵云</td><td>22</td></tr></tbody></table></div><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> score;</span><br></pre></td></tr></table></figure><div class="table-container"><table><thead><tr><th>code</th><th>year</th><th>subject</th><th>score</th></tr></thead><tbody><tr><td>1</td><td>2006</td><td>语文</td><td>60</td></tr><tr><td>1</td><td>2006</td><td>数学</td><td>55</td></tr><tr><td>1</td><td>2006</td><td>体育</td><td>120</td></tr><tr><td>2</td><td>2006</td><td>体育</td><td>50</td></tr><tr><td>2</td><td>2006</td><td>数学</td><td>75</td></tr><tr><td>2</td><td>2006</td><td>语文</td><td>80</td></tr><tr><td>3</td><td>2006</td><td>语文</td><td>85</td></tr><tr><td>4</td><td>2006</td><td>数学</td><td>80</td></tr><tr><td>4</td><td>2006</td><td>体育</td><td>90</td></tr></tbody></table></div><p>请写出下列sql查询语句;<br>​    1) Score 表中数学80分以下的记录<br>​    2) 数学80分以下的同学名字<br>​    3) code为1的学生分数高于90的科目<br>​    4) 名叫武松的学生的不及格 ( 60分及格)的科目<br>​    5) 2006 年语文的平均分<br>​    6) 赵云的平均分<br>​    7) 同时列出所有科目 2006年的平均分</p><ol><li><p>请列举两个以上你知道的ddl命令</p></li><li><p>设有图书管理数据库:<br>图书(总编号C(6),分类号C(8),书名C(16),作者C(6),出版单位C(20),单价N(6,2))<br>读者(借书证号C(4),单位C(8),姓名C(6),性别C(2),职称C(6),地址C(20))<br>借阅(借书证号C(4),总编号C(6),借书日期D(8))<br>对于图书管理数据库,求CCIE单位借阅图书的读者的人数，下面SQL语句正确的是_______?<br>SELECT ______ FROM 借阅 WHERE 借书证号 _______<br>A、COUNT (DISTINCT借书证号)<br>IN (SELECT借书证号FROM读者WHERE单位=”CCIE”)<br>B、COUNT (DISTINCT借书证号)<br>IN (SELECT借书证号FROM借阅WHERE单位=”CCIE”)<br>C、SUM (DISTINCT借书证号)<br>IN (SELECT借书证号FROM读者WHERE单位=”CCIE”)<br>D、SUM (DISTINCT借书证号)<br>IN (SELECT借书证号FOR借阅WHERE单位= CCIE”)</p></li></ol><ol><li><p>以下程序运行结果是什么?</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TryCatch</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        TryCatch c = <span class="keyword">new</span> TryCatch();</span><br><span class="line">c.method();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">method</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">"A"</span>);</span><br><span class="line">        <span class="keyword">int</span> i= <span class="number">10</span> / <span class="number">0</span>;</span><br><span class="line">        System.out.println(<span class="string">"B"</span>);</span><br><span class="line">    &#125; <span class="keyword">catch</span>(Exception e) &#123;</span><br><span class="line">System.out.println(<span class="string">"C"</span>);</span><br><span class="line">    &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">"D"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>以下程序运行结果是什么?</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Inherance</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        ChildClass clazz = <span class="keyword">new</span> ChildClass();</span><br><span class="line">ChildClass.staticMethod();</span><br><span class="line">        clazz.method();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ParentClass</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ParentClass</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"A"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">staticMethod</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"B"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">method</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"C"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ChildClass</span> <span class="keyword">extends</span> <span class="title">ParentClass</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ChildClass</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"X"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">staticMethod</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"Y"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">method</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"Z"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>写一个类实现singleton设计模式</p></li></ol><ol><li><p>请描述JDK的集合类,及其它们各自的特点</p></li><li><p>若使用开源软件开发一个中大型的J2EE Web Application ,你推荐使用的会有哪些开源的framework或工具,并请分别描述它们的作用</p></li></ol><ol><li><p>分析题(必答题)</p><ul><li><p>作为时尚群体，年轻人的消费空间很大，比较喜欢尝鲜，衣服和各种生活物品只进不出。但小户型房子，储物空间有限没有足够地方容纳，必须要推陈应新。但目前处理旧衣物的方式有限:独生子女群体居多，也没有家人亲戚可以赠送。即使知道哪里有灾难发生，灾民缺衣少物也没有通道进行捐赠;一手市场耗费精力，且效果不好….所以， 需要建立一个 公益捐物网站， 可随时提交捐赠需求，等待有人上门收取，轻松做到眼不见心不烦。捐赠带来额外好处: 1.换取公益积分(积分可用于订阅杂志、享受参与活动的商家优惠、换取书籍等) 2.公益积分可冲抵水电费….</p></li><li><p>业务故事:小A有一批衣服需要捐赠，他在手机上提交一份捐赠需求，写明自已要捐赠什么衣服，新旧程度，多少数量，什么方式预约，上门时间…小A提交捐赠后，收到预约电话，约好了3天后的周末下午上门取衣服。到了预定的时间，上门取衣服的社 工检查了捐赠的数量后，拿出手机查找到小A捐赠的那笔单子，确认收到几件衣服，并发送积分。小A捐赠了几次衣服后，发现自己拥有了不少公益积分，小A可以在积分频道可以兑换书籍，也可以兑换一些公益合作商家的优惠卡，如洗车、吃饭等。</p></li></ul><ol><li>此公益捐物网站，至少应包含哪些功能?并请简要描述功能。</li><li>针对业务故事，试画相应的业务流程图，明确参与方及功能之间的流程。</li><li>针对以上需求，设计数据字典和数据关系图。</li></ol></li></ol>]]></content>
      
      
      <categories>
          
          <category> Java面试题 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Java面试题18</title>
      <link href="/2018/09/15/Java%E9%9D%A2%E8%AF%95%E9%A2%9818/"/>
      <url>/2018/09/15/Java%E9%9D%A2%E8%AF%95%E9%A2%9818/</url>
      
        <content type="html"><![CDATA[<h3 id="一、多选题"><a href="#一、多选题" class="headerlink" title="一、多选题"></a>一、多选题</h3><ol><li><p>请选出下列选项哪些是计算机操作系统</p><p>A. Windows</p><p>B. Solaris</p><p>C. Linux</p><p>D. DOS</p><p>E. OSX</p><p>F. iOS</p><p>G. Symbian</p><p>H. Android</p></li><li><p>请选出下列选项哪些不是编程语言</p><p>A. PHP</p><p>B. Java</p><p>C. C++</p><p>D. C#</p><p>E. C</p><p>F. CSS</p><p>G. COBOL</p><p>H. Delphi</p><p>I. Perl</p><p>J. JavaScript</p></li><li><p>请选出下列选项哪些不是数据库</p><p>A. Oracle</p><p>B. DB2</p><p>C. FoxPro</p><p>D. MySQL</p><p>E. SQLServer</p><p>F. Access</p><p>G. PostgreSQL</p></li><li><p>请选择你所使用过的AJAX框架</p><p>A. Dojo</p><p>B. Echo 2</p><p>C. DWR</p><p>D. AjaxAC</p><p>E. JPSpan</p><p>F. XAJAX</p><p>G. ExtJS</p><p>H. Prototype</p><p>I. YUI</p><p>J. GWT</p><p>K. jQuery</p></li></ol><h3 id="二、简答题"><a href="#二、简答题" class="headerlink" title="二、简答题"></a>二、简答题</h3><ol><li>这段代码可能有什么问题: <code>String retValue = API.functionA();if(retValue.equals(&quot;true&quot;)){...}</code></li><li>==与equals的区别?</li><li>Java是如何处理整型的溢出?</li><li>静态变量在什么时候加载?编译期还是运行期?静态代码块加载的时机呢?</li><li>Java中解析XML有几种方法?简单写一段加载方法。</li></ol><h3 id="三、设计题"><a href="#三、设计题" class="headerlink" title="三、设计题"></a>三、设计题</h3><ol><li><p>编写一个类, 要求实现整数数组升序和降序两个功能以供其他类调用. 请说明为什么选择用这样的算法?</p></li><li><p>有如下三张表, 请写一条SQL语句查询出选了2门课以上的学生的名称</p><p><strong>学生表student</strong></p><p>主键: s_id int</p><p>学生名称: s_name varchar2</p></li></ol><p>   <strong>课程表course</strong></p><p>   主键: c_id int</p><p>   课程名称:c_name varchar2</p><p>   <strong>选课表student_course</strong></p><p>   主键: id int</p><p>   学生ID: s_id int</p><p>   课程ID: c_id int</p>]]></content>
      
      
      <categories>
          
          <category> Java面试题 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Java面试题17</title>
      <link href="/2018/09/15/Java%E9%9D%A2%E8%AF%95%E9%A2%9817/"/>
      <url>/2018/09/15/Java%E9%9D%A2%E8%AF%95%E9%A2%9817/</url>
      
        <content type="html"><![CDATA[<p>软件开发工程师笔试题</p><p>时间:60分钟</p><p>注意:</p><p>(1)题目并不要求全做，选择自己会的即可，掌握好时间。<br>(2)请将答案写到答题纸上，写上名字和联系方式。<br>(3)答题过程要求独立完成，不能求助他人，翻阅资料或上网查询。<br>(4)编程题不限定语言，请使用自己擅长的语言并注明。</p><ol><li><p>编写一个函数，返回n个字符串列表，满足:从数字1开始，如果能被3整除为”Fizz”,<br>被5整除为”Buzz”，被3和5同时整除为“FizzBuzz”,否则字符串为数字本身。<br>N=15<br>结果:<br>[“1”,”2”,”Fizz”,”4”,”Buzz”,”Fizz”,”7”,”8”,”Fizz”,”Buzz”,”11”,”Fizz”,”13”,14”,” FizzBuzz”]</p></li><li><p>一个int型数组，除了1个元素只出现过一次外，其他的元素都出现过两次，请找出那个元素</p><p>注意:</p><ol><li>算法必须满足线性时间复杂度</li><li>尽量没有额外的内存开销</li></ol></li><li><p>有12个外观相同的篮球，其中1个的重量和其他11个的重量不同(有可能轻，有可能重)，怎么用最少的比较来找出那个球。</p></li><li><p>根据下面两个表写SQL查询：<br>表Person(主键PersonId)</p></li></ol><div class="table-container"><table><thead><tr><th>Column Name</th><th>Type</th></tr></thead><tbody><tr><td>PersonId</td><td>int</td></tr><tr><td>FirstName</td><td>varchar</td></tr><tr><td>LastName</td><td>varchar</td></tr></tbody></table></div><p>   表Address(主键AddressId)</p><div class="table-container"><table><thead><tr><th>Column Name</th><th>Type</th></tr></thead><tbody><tr><td>AddressId</td><td>int</td></tr><tr><td>PersonId</td><td>int</td></tr><tr><td>City</td><td>varchar</td></tr><tr><td>State</td><td>varchar</td></tr></tbody></table></div><p>   获取 Person表中的每个人的下列信息，不管这个人有没有地址：<br>   FirstName, LastName, City, State</p><ol><li><p>下水道并盖为什么是圆的?</p></li><li><p>写下你最近遇到的一个比较麻烦的技术问题，并写下解决过程。</p></li></ol>]]></content>
      
      
      <categories>
          
          <category> Java面试题 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Java面试题16</title>
      <link href="/2018/09/15/Java%E9%9D%A2%E8%AF%95%E9%A2%9816/"/>
      <url>/2018/09/15/Java%E9%9D%A2%E8%AF%95%E9%A2%9816/</url>
      
        <content type="html"><![CDATA[<ol><li><p>写一个方法, 将长整型数值表示的秒数, 转换为”X天X小时X分钟X秒”这样格式的字符串返回. (当X为0时, 该单位的内容不输出. 例如: 3天6小时40秒, 要求使用循环, 请考虑内存使用)(5分)</p></li><li><p>打印杨辉三角形(要求打印出10行如下图)(15分)</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">      1</span><br><span class="line">     1 1</span><br><span class="line">    1 2 1</span><br><span class="line">   1 3 3 1</span><br><span class="line">  1 4 6 4 1</span><br><span class="line">1 5 10 10 5 1</span><br></pre></td></tr></table></figure></li><li><p>实现数组排序的方法, 要求输入一个整数数组，返回一个核好序的新数组。(10分)</p></li><li><p>实现在数组中查找元素的方法, 要求方法输入一个有序的数组和一个整收n，返回n在数组中的位置。(找到即返回,请考虑效率)(10分)</p></li><li><p>数据库</p><p>1)数据库事务是什么?什么情况下使用?请举例说明死锁的情况(5分)</p><p>现有数据库表结构如下(三个表除了主键以外没有创建任何索引)</p><p>客户信息表 cust_t</p></li></ol><div class="table-container"><table><thead><tr><th>字段</th><th>类型</th><th>名称</th><th></th></tr></thead><tbody><tr><td>custid</td><td>long</td><td>客户id</td><td>PK</td></tr><tr><td>custname</td><td>vchar(32)</td><td>客户名称</td></tr></tbody></table></div><p>   产品信息表 product_t</p><div class="table-container"><table><thead><tr><th>字段</th><th>类型</th><th>名称</th><th></th></tr></thead><tbody><tr><td>productid</td><td>long</td><td>产品id</td><td>PK</td></tr><tr><td>productname</td><td>vchar(64)</td><td>产品名称</td><td></td></tr><tr><td>category</td><td>char(1)</td><td>产品种类</td><td></td></tr><tr><td>model</td><td>vchar(32)</td><td>产品型号</td><td></td></tr><tr><td>price</td><td>number(12,2)</td><td>单价</td><td></td></tr><tr><td>stock</td><td>int</td><td>库存数量</td></tr></tbody></table></div><p>   订单信息表 order_t</p><div class="table-container"><table><thead><tr><th>字段</th><th>类型</th><th>名称</th><th></th></tr></thead><tbody><tr><td>orderno</td><td>char(8)</td><td>订单编号</td><td>PK</td></tr><tr><td>custid</td><td>long</td><td>客户id</td><td></td></tr><tr><td>productid</td><td>long</td><td>产品id</td><td></td></tr><tr><td>price</td><td>number(12,2)</td><td>单价</td><td></td></tr><tr><td>quantity</td><td>int</td><td>数量</td><td></td></tr><tr><td>orderdate</td><td>date</td><td>下单日期</td></tr></tbody></table></div><p>   以下问题可能存在不同数据库(Oracle/db2/mysql/SQL Server等)的差异，请在答题之前先说明您的答案是基于哪种数据库考虑的:以下答题基于_____数据库为准。</p><p>​    2)请写出对产品信息表进行分页查询的SQL语句(以问号代替分页参数)(12分)</p><p>​    3)请说明以下两个SQL语句以及执行结果的区别(4分)</p><p>​    </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">select * from order_t a, cust_t b where a.custid=b.custid and a.orderdate=?;</span><br><span class="line"></span><br><span class="line">select * from order_t a join cust_t b on a.custid=b.custid and a.orderdate=?;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Java面试题 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Java面试题15</title>
      <link href="/2018/09/14/Java%E9%9D%A2%E8%AF%95%E9%A2%9815/"/>
      <url>/2018/09/14/Java%E9%9D%A2%E8%AF%95%E9%A2%9815/</url>
      
        <content type="html"><![CDATA[<p><strong>题目</strong>: 使用Spring Boot完成一个http Rest API的开发，可使用你熟悉的数据库和ORM框架.该API使用账户的积分来兑换礼品. 目前可供兑换的礼品为可乐，薯条和咖啡，分别需要30, 40，50积分.每次兑换需要检查礼品的库存，需要5到30秒之间的一个随机值，请用代码模拟该过程.检查库存后请在数据库中减去账户上的积分.系统目前有两个用户A和B,账户分别有100，150个积分。请设计和实现该积分兑换API.<br><strong>完成时间</strong>: 2小时之内</p>]]></content>
      
      
      <categories>
          
          <category> Java面试题 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Java面试题14</title>
      <link href="/2018/09/14/Java%E9%9D%A2%E8%AF%95%E9%A2%9814/"/>
      <url>/2018/09/14/Java%E9%9D%A2%E8%AF%95%E9%A2%9814/</url>
      
        <content type="html"><![CDATA[<ol><li><p>集合的种类与区别</p></li><li><p>集合与一堆数组的区别，请结合做过的项目说一下在何种情况下会使用到一维数组</p></li><li><p>请写出springmvc常用的注解及其作用</p></li><li><p>请简述使用过的webservice框架并简述如何调用其过程</p></li><li><p>请简单描述如何编写一个点击中奖的程序，此程序需要将中奖率控制在40%(无需写具体的程序代码，只需要简述自己的想法即可)</p></li><li><p>如下两张表</p></li></ol><p>A表</p><div class="table-container"><table><thead><tr><th>ID</th></tr></thead><tbody><tr><td>1</td></tr><tr><td>2</td></tr><tr><td>3</td></tr><tr><td>4</td></tr></tbody></table></div><p>B表</p><div class="table-container"><table><thead><tr><th>ID</th><th>Value</th></tr></thead><tbody><tr><td>1</td><td>1</td></tr><tr><td>1</td><td>2</td></tr><tr><td>2</td><td>3</td></tr><tr><td>3</td><td>5</td></tr><tr><td>5</td><td>5</td></tr><tr><td>6</td><td>6</td></tr></tbody></table></div><p>   请写出一下sql语句的结果:<br>   1).select <em> from A,B where a.id=b.id(+);<br>   2).select </em> from A,B where a.id=b.id;</p>]]></content>
      
      
      <categories>
          
          <category> Java面试题 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Java面试题13</title>
      <link href="/2018/09/14/Java%E9%9D%A2%E8%AF%95%E9%A2%9813/"/>
      <url>/2018/09/14/Java%E9%9D%A2%E8%AF%95%E9%A2%9813/</url>
      
        <content type="html"><![CDATA[<h2 id="Java基础"><a href="#Java基础" class="headerlink" title="Java基础"></a>Java基础</h2><h3 id="一、填空题（每题1分，共10分）"><a href="#一、填空题（每题1分，共10分）" class="headerlink" title="一、填空题（每题1分，共10分）"></a>一、填空题（每题1分，共10分）</h3><ol><li><p><code>&quot;abcdefg&quot;.substring(2,3)</code>的结果是(         )</p></li><li><p>下面程序的运行结果是(         ) </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">String str1 = <span class="string">"hello"</span>;</span><br><span class="line">String str2 = <span class="string">"he"</span> + <span class="keyword">new</span> String(<span class="string">"llo"</span>);</span><br><span class="line">System.err.println(str1 == str2);</span><br></pre></td></tr></table></figure></li><li><p><code>String[] a = new String[10];</code> a[3]为(         ) ;  <code>int[] b = new int[10];</code> b[0]为(         ) </p></li><li><p><code>Math.round(11.5)</code>的返回值是(         ) ，<code>Math.round(-11.5)</code>的返回值是(          ) </p></li><li><p>一个long型数据在内存占(         ) 个字节。</p></li><li><p>表达式<code>5.3 + (int)(8.5 + 4.6) / 3 % 4</code>的值是(         ) </p></li><li><p>关系运算符的运算结果是(         ) 型数据</p></li><li><p>表示圆周率的常量是(         ) </p></li></ol><h3 id="二、选择题（每题0-5分，共15分）"><a href="#二、选择题（每题0-5分，共15分）" class="headerlink" title="二、选择题（每题0.5分，共15分）"></a>二、选择题（每题0.5分，共15分）</h3><ol><li><p>在java中，由java编译器自动导入，而无需在程序中用import导入的包是(         ) </p><p>A. java.applet       </p><p>B. java.lang     </p><p>C. java.util     </p><p>D. java.awt</p></li><li><p>0.6332的数据类型是(         ) </p><p>A float     </p><p>B double     </p><p>C Float      </p><p>D Double</p></li><li><p><code>System.out.println(&quot;5&quot; + 2);</code>的输出结果应该是(         ) </p><p>A  52                   </p><p>B 7                     </p><p>C 2                    </p><p>D 5</p></li><li><p>下列哪种异常是检查型异常，需要在编写程序时声明 (         ) </p><p>A NullPointerException         </p><p>B ClassCastException      </p><p>C FileNotFoundException       </p><p>D IndexOutOfBoundsException </p></li><li><p>下列方法中可以用来创建一个新线程的是(         ) </p><p>A.继承java.lang.Runnable接口并重写run()方法</p><p>B.实现java.lang.Runnable接口并重写start()方法</p><p>C.实现java.lang.Thread类并实现start()方法</p><p>D.继承java.lang.Thread类并重写run()方法</p></li><li><p>switch（）{}结构中，括号中可使用的数据类型不能是(         ) </p><p>A.String        </p><p>B.int     </p><p>C.short    </p><p>D.float</p></li><li><p>Socket通信使用的底层协议是(         ) </p><p>A.UDP协议   </p><p>B.TCP/IP协议   </p><p>C.FTP协议 </p><p>D.TELNET协议</p></li><li><p>下列叙述中，正确的是(         ) </p><p>A.java语言的标识符是区分小写的</p><p>B.源文件名与public类名可以不相同</p><p>C.源文件名其扩展为.jar</p><p>D.源文件中public类的数目不限</p></li><li><p>下面哪些不是Thread类的方法(         ) </p><p>A start()       </p><p>B run()       </p><p>C exit()       </p><p>D getPriority()</p></li><li><p>下列说法正确的有(         ) </p><p>A．class中的constructor不可省略</p><p>B．constructor必须与class同名，但方法不能与class同名</p><p>C．constructor在一个对象被new时执行</p><p>D．一个class只能定义一个constructor</p></li><li><p>下列说法正确的是(         ) </p><p>A．LinkedList继承自List</p><p>B．AbstractSet继承自Set</p><p>C．HashSet继承自Set</p><p>D．WeakMap继承自HashMap</p></li><li><p>下面哪个流类属于字符输入流(         ) </p><p>A  BufferedWriter              </p><p>B  FileInputStream          </p><p>C  ObjectInputStream       </p><p>D  InputStreamReader</p></li><li><p>ArrayList list = new ArrayList(20);中的list扩充几次(         ) </p><p>A 0     </p><p>B 1     </p><p>C 2      </p><p>D 3</p></li><li><p>下面哪些是对称加密算法(         ) </p><p>A ECC </p><p>B AES   </p><p>C DSA   </p><p>D RSA</p></li><li><p>新建一个流对象，下面哪个选项的代码是错误的？(         ) </p><p>A）new BufferedWriter(new FileWriter(“a.txt”));</p><p>B）new BufferedReader(new FileInputStream(“a.dat”));</p><p>C）new GZIPOutputStream(new FileOutputStream(“a.zip”));</p><p>D）new ObjectInputStream(new FileInputStream(“a.dat”));</p></li><li><p>下列属于合法的java标识符的是(         ) </p><p>A._cat       </p><p>B.5books </p><p>C.+static    </p><p>D.-3.14159</p></li><li><p>以下哪些方法不是Itertor的方法？(         ) </p><p>A.next       </p><p>B.equals     </p><p>C.remove     </p><p>D.hasNext</p></li><li><p>File类型中定义了什么方法来判断一个文件是否存在？(         ) </p><p>A.creatNewFile   </p><p>B.renameTo   </p><p>C.delete     </p><p>D.exists</p></li><li><p>关于构造器是否可以被override，是否可以被overload(         ) </p><p>A 能，能            </p><p>B 不能，能 </p><p>C 不能，能        </p><p>D 能，不能 </p></li><li><p>如果对象的引用被置为null，垃圾收集器什么时候释放对象占用的内存？(         ) </p><p>A.立即释放       </p><p>B.方法调用结束后释放             </p><p>C.下一个垃圾回收周期      </p><p>D.不确定</p></li><li><p>关于接口和抽象类不正确是(         ) </p><p>A． 接口中所有的方法隐含的都是抽象的，而抽象类则可以同时包含抽象和非抽象的方法</p><p>B． 类可以实现很多个接口，但是只能继承一个抽象类</p><p>C． Java接口与抽象类都可以包含非final的变量</p><p>D． 接口是绝对抽象的，不可以被实例化，抽象类也不可以被实例化</p></li><li><p>存在使当i+1&lt;i时，i为多少？(         ) </p><p>A.0  </p><p>B.1  </p><p>C.2147483647     </p><p>D.不存在</p></li><li><p>Java Application中的主类许包含main方法，main方法的返回类型是什么？(         ) </p><p>A.int        </p><p>B.float  </p><p>C.double     </p><p>D.void</p></li><li><p>下列哪些语句关于java内存回收的说明是正确的(         ) </p><p>A. 程序员必须创建一个线程来释放内存</p><p>B. 内存回收程序负责释放无用内存</p><p>C. 内存回收程序允许程序员直接释放内存</p><p>D. 内存回收程序可以在制定的时间内释放内存对象</p></li><li><p>下列关于修饰符混用的说法，错误的是(         ) </p><p>A．abstract不能与final并列修饰同一个类</p><p>B．abstract类中可以有private的成员</p><p>C．abstract方法必须在abstract类中</p><p>D．static方法中能处理非static的属性</p></li><li><p>下列说法正确的有(         ) </p><p>A． class中的constructor不可省略</p><p>B． constructor必须与class同名，但方法不能与class同名</p><p>C． constructor在一个对象被new时执行</p><p>D．一个class只能定义一个constructor</p></li><li><p>下列哪种说法是正确的(         ) </p><p>A．实例方法可直接调用超类的实例方法</p><p>B．实例方法可直接调用超类的类方法</p><p>C．实例方法可直接调用其他类的实例方法</p><p>D．实例方法可直接调用本类的类方法</p></li><li><p>下列哪一种叙述是正确的(         ) </p><p>A． abstract修饰符可修饰字段、方法和类</p><p>B． 抽象方法的body部分必须用一对大括号{ }包住</p><p>C． 声明抽象方法，大括号可有可无</p><p>D． 声明抽象方法不可写出大括号</p></li><li><p>Java语言中，String类的IndexOf()方法返回的类型是？(         ) </p><p>A、Int16     </p><p>B、Int32     </p><p>C、int       </p><p>D、long</p></li><li><p>下列哪些语句关于内存回收的说明是正确的(         ) </p><p>A 程序员必须创建一个线程来释放内存</p><p>B 内存回收程序负责释放无用内存</p><p>C 内存回收程序允许程序员直接释放内存</p><p>D 内存回收程序可以在指定的时间释放内存对象</p></li></ol><h3 id="三、简答题（共10分）"><a href="#三、简答题（共10分）" class="headerlink" title="三、简答题（共10分）"></a>三、简答题（共10分）</h3><ol><li><p>a = a + b 与 a += b 的区别？（5分）</p></li><li><p>final、finalize 和 finally 的不同之处？（5分） </p></li></ol><h2 id="JavaWeb"><a href="#JavaWeb" class="headerlink" title="JavaWeb"></a>JavaWeb</h2><h3 id="一、填空题（每题1分，共10分）-1"><a href="#一、填空题（每题1分，共10分）-1" class="headerlink" title="一、填空题（每题1分，共10分）"></a>一、填空题（每题1分，共10分）</h3><ol><li><p>使用JDBC链接数据库的顺序是(         ) </p><p>A.加载驱动</p><p>B.导入驱动包</p><p>C.发送并处理SQL语句</p><p>D.建立于数据库的链接</p><p>E.关闭链接</p></li><li><p>JSP九大内置对象, 分别为：(         ) 、(         ) 、(         ) 、(         ) 、(         ) 、(         ) 、(         ) 、(         ) 、(         ) (每个0.5)</p></li><li><p>JSP中四大域对象, 分别为: (         ) 、(         ) 、(         ) 、(         )  (每个0.5)</p></li><li><p>JSP中三大指令, 分别为: (         ) 、(         ) 、(         )  (每个0.5)</p></li><li><p>在tomcat中访问helloapp应用的login.html文件时，在浏览器地址栏应写的url为：(         ) </p></li><li><p>jsp中实现请求转发的标记为：(         ) </p></li></ol><h3 id="二、选择题（每题0-5分，共15分）-1"><a href="#二、选择题（每题0-5分，共15分）-1" class="headerlink" title="二、选择题（每题0.5分，共15分）"></a>二、选择题（每题0.5分，共15分）</h3><ol><li><p>关于转发和重定向以下哪些说法是正确的(         ) </p><p>A.转发url会改变</p><p>B.重定向url不会改变</p><p>C.重定向保持request中存放参数</p><p>D.转发能保持request中存放参数</p></li><li><p>Oracle数据库表空间与用户的关系是(         ) </p><p>A.一对一 </p><p>B.一对多 </p><p>C.多对一 </p><p>D.多对多</p></li><li><p>哪一子句可实现 SELECT 语句查询员工平均工资小于5的部门信息 ?(         ) </p><p>A. GROUP BY dept_id WHERE AVG(sal) &lt; 5</p><p>B. GROUP BY AVG(sal) HAVING AVG(sal) &lt; 5</p><p>C. GROUP BY dept_id HAVING AVG(sal) &lt; 5</p><p>D. GROUP BY AVG(sal) &lt; 5</p></li><li><p>下列哪个集合操作符返回两个查询所选择的所有的行(         ) </p><p>A Union      </p><p>B Union all  </p><p>C Union only </p><p>D connect by</p></li><li><p>从以下哪一个选项中可以获得Servlet的初始化参数(         ) </p><p>A.Servlet    </p><p>B.ServletContext </p><p>C.ServletConfig  </p><p>D.GenericServlet</p></li><li><p>哪一个对象可以用于获得浏览器发送的请求(         ) </p><p>A.HttpServletRequest     </p><p>B.HttpServletResponse        </p><p>C.HttpServlet        </p><p>D.Http </p></li><li><p>运行jsp需要安装<strong>___</strong>Web服务器(         ) </p><p>A．Apache    </p><p>B．nodejs    </p><p>C．jetty </p><p>D．IIS</p></li><li><p>下面的那一个不属于MVC模式中的对象？(         ) </p><p>A. Model </p><p>B. View      </p><p>C. Collection        </p><p>D. Controller </p></li><li><p>POST和GET哪一个在form提交时会自动把参数和值加入到url中(         ) </p><p>A.POST       </p><p>B.GET        </p><p>C.两者都会   </p><p>D.两者都不会</p></li><li><p>要实现隐藏div，使用display：(         ) </p><p>A.false  </p><p>B.hidden     </p><p>C.””       </p><p>D.none</p></li><li><p>在正则 表达式中\d代表什么(         ) </p><p>A.数字字符   </p><p>B.非数字字符 </p><p>C.任意一个字母  </p><p>D.任意的空白符</p></li><li><p>以下sql语句下划线中填入什么值能得到正确的结果?(         ) </p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="keyword">num</span>,<span class="keyword">count</span>(score) <span class="keyword">from</span> play <span class="keyword">group</span> by____</span><br></pre></td></tr></table></figure><p>A.num       </p><p>B.score  </p><p>C.count(score)</p></li><li><p>以下对jdbc事务描述错误的是(         ) </p><p>A.JDBC事务属于java事务的一种</p><p>B.JDBC事务属于容器事务类型</p><p>C.JDBC事务可以保证操作的完整性和一致性</p><p>D.JDBC事务是由Connection发起的，并由Connection控制</p></li><li><p>以下哪些不会引起索引失效(         ) </p><p>A.使用like关键字</p><p>B.字符常量使用单引号</p><p>C.查询条件使用函数在索引列上</p><p>D.条件中包含&lt;&gt;</p></li><li><p>下列可以用来解析XML的是(         ) </p><p>A.CSS        </p><p>B.DTD        </p><p>C.SAX        </p><p>D.XSL </p></li><li><p>在不指定特殊属性的情况下，哪几种HTML标签可以手动输入文本(         ) </p><p>A. <span></span></p><p>B. <input type="text"></p><p>C. <input type="hidden"></p><p>D. <div></div></p></li><li><p>下面哪些属于JSTL中的表达式操作标签(         ) </p><p>A．<c:out>   </c:out></p><p>B．<c:if>    </c:if></p><p>C．<c:url>   </c:url></p><p>D．<c:catch></c:catch></p></li><li><p>在Servlet处理请求的方式为(         ) </p><p>A、以进程的方式  </p><p>B、以程序的方式  </p><p>C、以线程的方式  </p><p>D、以响应的方式</p></li><li><p>Http缺省的请求方法是(         ) </p><p>A.PUT        </p><p>B.GET        </p><p>C.POST       </p><p>D.TRACE</p></li><li><p>在XML中用于注释的符号是(         ) </p><p>A．<!-- -->      </p><p>B．&lt;?– –?&gt;     </p><p>C．&lt;% %&gt;    </p><p>D．&lt;!– –!&gt;</p></li><li><p>JDBC中，用于表示数据库连接的对象是(         ) </p><p>A. Statement     </p><p>B. Connection        </p><p>C. DriverManager </p><p>D. PreparedStatement</p></li><li><p>用于调用存储过程的对象是(         ) </p><p>A.ResultSet      </p><p>B.DriverManager  </p><p>C.CallableStatemet       </p><p>D.PreparedStatement</p></li><li><p>如果没有指定Cookie的时效，那么默认的时效是(         ) </p><p>A. 一天      </p><p>B. 永不过期   </p><p>C. 会话级别     </p><p>D. 一分钟</p></li><li><p>下列哪个为JSP的小脚本的标签？(         ) </p><p>A．&lt;% %&gt; </p><p>B．&lt;@ %&gt; </p><p>C．&lt;%! %&gt;    </p><p>D．&lt;%– %&gt;</p></li><li><p>对于每一个网站访问用户都要访问的变量，应该将它设为(         ) 变量</p><p>A. Session   </p><p>B. Request   </p><p>C. Response  </p><p>D. Application</p></li><li><p>在MVC设计模式中，JavaBean的作用是(         ) </p><p>A、Controller       </p><p>B、Model </p><p>C、业务数据的封装    </p><p>D、View</p></li><li><p>在JavaEE中属于Web层的组件有(         ) </p><p>A. HTML      </p><p>B. EJB       </p><p>C. Applet    </p><p>D. JSP</p></li><li><p>下列属于关系型数据库的是(         ) </p><p>A. Redis     </p><p>B MySql      </p><p>C IMS        </p><p>D MongoDB</p></li><li><p>如何创建Cookie?(         ) </p><p>A. 使用new Cookie语句</p><p>B. 调用response.addCookie方法</p><p>C. 使用Cookie的setMaxAge方法</p><p>D. setCookie方法</p></li><li><p>编写一个Filter，除继承HttpServlet类外还需要(         ) </p><p>A．继承Filter 类 </p><p>B．实现Filter 接口  </p><p>C．继承HttpFilter 类     </p><p>D．实现HttpFilter接口</p></li></ol><h3 id="二、简答题（10分）"><a href="#二、简答题（10分）" class="headerlink" title="二、简答题（10分）"></a>二、简答题（10分）</h3><ol><li>说一说Servlet生命周期(5分)</li><li>get提交和post提交有何区别(5分)</li></ol><h2 id="Java框架"><a href="#Java框架" class="headerlink" title="Java框架"></a>Java框架</h2><h3 id="一、选择题（每题0-5分，共15分）"><a href="#一、选择题（每题0-5分，共15分）" class="headerlink" title="一、选择题（每题0.5分，共15分）"></a>一、选择题（每题0.5分，共15分）</h3><ol><li><p>Struts框架可以支持以下哪种程序开发语言(         ) </p><p>A.C     </p><p>B.C++        </p><p>C.Java       </p><p>D.C#</p></li><li><p>以下属于struts2的控制器组件的是(         ) </p><p>A： Action   </p><p>B: ActionForm    </p><p>C:ActionServlet      </p><p>D:dispatchAction</p></li><li><p>以下关于ValueStack说法不正确的是(         ) </p><p>A.每个Action对象实例拥有一个ValueStack对象</p><p>B.每个Action对象实例拥有多个ValueStack对象</p><p>C.Action中封装的需要传入下一个页面的值，这些值封装在ValueStack对象中</p><p>D.ValueStack会在请求开始时创建，请求结束时消亡</p></li><li><p>单元测试是在软件开发过程中的哪个阶段完成的(         ) </p><p>A. 可行性研究和计划</p><p>B. 概要设计</p><p>C. 实现</p><p>D. 使用和维护</p></li><li><p>在struts配置中用(         ) 元素配置常量</p><p>A.<const></const></p><p>B.<constants></constants></p><p>C.<constant></constant></p><p>D.<constant-mapping></constant-mapping></p></li><li><p>在struts.xml文件中，使用(         ) 定义拦截器   B</p><p>A.<interceptor-ref></interceptor-ref></p><p>B.<interceptor></interceptor></p><p>C.<intercep></intercep></p><p>D.<defaull-interceptor-ref></defaull-interceptor-ref></p></li><li><p>在OGNL中?操作符的作用是(         ) </p><p>A.取出符合选择逻辑的第一个元素</p><p>B.取出符合选择逻辑的第=最后一个元素</p><p>C.取出符合选择逻辑的所有元素</p><p>D.以上说法都不对</p></li><li><p>struts2中的ActionServlet属于MVC模式(         ) </p><p>A.视图</p><p>B.模型</p><p>C.控制器</p><p>D.业务层</p></li><li><p>下面对Spring中Bean的注入说法正确的是(         )<br>A、Bean根据注入方式不同可以分为构造方法注入和自动装载。<br>B、使用构造方法注入构造对象的同时，完成依赖关系的建立<br>C、在关系的对象很多时，使用构造方法注入更适合<br>D、构造方法通过constructor-index属性来指定，在该标签下要指定索引的位置</p></li><li><p>以下说法不正确的是(         )<br>A、Spring是一个轻量级框架，大大简化了java企业级开发<br>B、Spring是企业级应用开发的一站式选择，可以取代其他已有框架<br>C、Spring框架最基本的部分是Spring Core模块，提供Ioc和依赖注入<br>D、Spring AOP是基于Spring Core的符合规范的面向切面编程的实现</p></li><li><p>下面对Spring框架的持久化支持说法错误的是(         )<br>A、Spring没有自己的持久化方案，它集合了现有的流行持久化框架<br>B、Spring采用JDBC模板封装了JDBC的数据库操作<br>C、Spring对各种持久化技术提供了统一的编程方式<br>D、Spring将数据库访问的checked异常转换为运行时异常</p></li><li><p>下面关于事务管理说法错误的是(         )<br>A、Spring事务管理方式包括编程方式、声明式<br>B、编程式采用的方式来控制事物的边界<br>C、声明式采用配置xml方式，将事务管理与实际业务代码解耦<br>D、实现编程事物，可以实现PlatformTransaction接口或是使用事务模板TransactionTemplate</p></li><li><p>在Hibernate中，以下关于主键生成器说法错误的是(         ) </p><p>A．increment可以用于类型为long、short的主键</p><p>B．identity用于如SQL Server、DB2、MySQL等支持标识列的数据库</p><p>C．sequence用于如Oracle、SQL Server等支持序列的数据库</p><p>D．native由Hibernate根据底层数据库自行判断采用何种主键生成策略，是由使用的数据库生成主键的值</p></li><li><p>在Hibernate映射文件中，关于inverse属性说法不正确的是(         ) </p><p>A．inverse属性有两个值：true、false</p><p>B．<many-to-one>标签有inverse属性</many-to-one></p><p>C．<set>标签有inverse属性</set></p><p>D．inverse属性用于指定维护关联关系的那一方</p></li><li><p>MyBatis指定配置文件的根元素使用的是(         ) </p><p>A．<sqlmapconfig></sqlmapconfig></p><p>B．<configuration></configuration></p><p>C．<setting></setting></p><p>D．<environments></environments></p></li><li><p>关于Hibernate缓存说法正确的是(         ) </p><p>A．Hibernate缓存一般分为二类：一级缓存、二级缓存</p><p>B．Session的evict( )方法用于从缓存中清除指定的持久化对象</p><p>C．Session的clear( )方法用于刷新缓存</p><p>D．Session的flush( )方法用于从缓存中清除所有持久化对象</p></li><li><p>关于HQL的连接查询，说法错误的是(         ) </p><p>A．inner join 或 join用于内连接</p><p>B．inner join fetch或 join fetch用于迫切内连接</p><p>C．left outer join fetch 或 left join fetch用于迫切左外连接</p><p>D．right outer join fetch 或 right join fetch用于迫切右外连接</p></li><li><p>关于HQL子查询中，说法错误的是(         ) </p><p>A．size( )或size用于获取集合中元素的数目</p><p>B．elements( )获取集合中的所有元用于素</p><p>C．any关键字用于子查询语句返回所有记录</p><p>D．in关键字与“=any”意思相同</p></li><li><p>评估CREATE TABLE 语句:</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> products(</span><br><span class="line">    product_id <span class="built_in">NUMBER</span>(<span class="number">6</span>) <span class="keyword">CONSTRAINT</span> prod_id_pk PRIMARY <span class="keyword">KEY</span>,</span><br><span class="line">product_name VARCHAR2(<span class="number">15</span>)</span><br><span class="line">)</span><br></pre></td></tr></table></figure><p>下列关于prod_id_pk选项正确的是(         ) </p><p>A．可以被创建，但需要唯一索引用手工创建</p><p>B．可以被创建并且会自动创建唯一索引</p><p>C．可以被创建并且会自动创建非唯一索引</p><p>D．可以被创建但不可以使用，因为没有指定索引</p></li><li><p>在Hibernate的HQL查询中，有如下代码：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">String hql = "<span class="keyword">select</span> model.deptName,model.createDate <span class="keyword">from</span> Dept <span class="keyword">as</span> <span class="keyword">model</span> <span class="string">";</span></span><br><span class="line"><span class="string">Query query = session.createQuery(hql);</span></span><br></pre></td></tr></table></figure><p>则query.list();返回的是(         ) </p><p>A．所有部门的集合</p><p>B．所有部门名称的集合</p><p>C．所有部门创建日期的集合</p><p>D．所有包括部门名称和创建日期的对象数组的集合</p></li><li><p>在Hibernate中，用于比较字符串的like操作符“like ‘%部%’”表示(         ) </p><p>A．所有以“部”开头的字符串</p><p>B．所有以“部”结尾的字符串</p><p>C．所有包括“部”的字符串</p><p>D．所有包括“部”且“部”不在开头和结尾的字符串 </p></li><li><p>对于HQL中的as关键字，下列说法正确的是(         ) </p><p>A．必须要有</p><p>B．必须没有</p><p>C．可以有，也可以没有</p><p>D．以上说法均不正确</p></li><li><p>在Hibernate中，下列说法不正确的是(         ) </p><p>A．HQL是基于SQL的</p><p>B．HQL提供更加面向对象的封装</p><p>C．HQL是Hibernate官方推荐的查询方式</p><p>D．HQL提供的是面向关系型数据库的</p></li><li><p>在Hibernate的Criteria查询中，查询5条记录的方法是(         ) </p><p>A．criteria.setFirstResult(4);</p><p>B．criteria.setFirstResult(5);</p><p>C．criteria.setMaxResult(4);</p><p>D．criteria.setMaxResult(5);</p></li><li><p>Criteria查询通过面向对象化的设计将数据查询条件封装为一个(         ) </p><p>A．对象</p><p>B．序列</p><p>C．类</p><p>D．HQL语句</p></li><li><p>在JAVA中，关于属性文件，下列选项说法正确的是(         ) </p><p>A．属性文件以名称和值的形式保存信息</p><p>B．属性文件不能写中文（？？？）</p><p>C．属性文件中能保存各种数据类型的信息</p><p>D．属性文件的文件扩展名是.xml</p></li><li><p>在Hibernate的映射文件中，id节点的property元素的(         ) 表示指定类的属性映射的表的字段名。</p><p>A．name</p><p>B．type</p><p>C．column</p><p>D．lazy </p></li><li><p>Spring MVC的中心控制器需要在哪里配置(         )<br>A spring-servlet.xml </p><p>B build-path </p><p>C tomcat </p><p>D web.xml</p></li><li><p>SpringMVC中为了把所有请求都提交给控制器处理，需要在哪里配置*.do？(         )<br>A spring-servlet.xml </p><p>B build-path </p><p>C tomcat </p><p>D web.xml</p></li><li><p>有个超链接<a href="find.do">查找</a>，为了接收这个请求，下面的说法正确的是(         )<br>A 在类上使用@Controller<br>B 在类上使用@RequestMapping(“/find”)<br>C 在方法上使用@RequestMapping(“/find”)<br>D 在方法的参数中使用@RequestMapping(“/find”)</p></li></ol><h3 id="二、简答题（15分）"><a href="#二、简答题（15分）" class="headerlink" title="二、简答题（15分）"></a>二、简答题（15分）</h3><ol><li>谈谈你对MVC的理解：(5分)</li><li>hibernate的三种状态之间如何转换 ？(5分) </li><li>请简述SpringMVC的工作机制？(5分) </li></ol>]]></content>
      
      
      <categories>
          
          <category> Java面试题 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Java面试题12</title>
      <link href="/2018/09/14/Java%E9%9D%A2%E8%AF%95%E9%A2%9812/"/>
      <url>/2018/09/14/Java%E9%9D%A2%E8%AF%95%E9%A2%9812/</url>
      
        <content type="html"><![CDATA[<ol><li><p>Insert the following record into the Franchise table:<br>Franchise No MF999<br>Franchise Name Mature Fash ions (Shet lands)<br>Franchise Address I. Lonely Spot, Lerwick Franchise Postcode 2E1IAA<br>Franchise Tel 015951245<br>Franchise Fax 015952356<br>Franchise Start Date 22nd January 2002</p></li><li><p>Update the above record and change the address to l, Main Street , Lerwick and the Start Date 15th February 2002.</p></li><li><p>Student (S#, Sname, Sage, Ssex)学生表 S#:学号; Sname:学生姓名; Sage:学生年龄; Ssex:学生性别</p><p>Course (C#, Cname, T#)课程表C#:课程编号; Cname:课程名字; T#:教师编号<br>SC(S#, C#, score)成绩表S#:学号; C#: 课程编号;score:成绩<br>Teacher (T#, Tname)教师表T#: 教师编号; Tname:教师名字<br>问题: 查询没学过“叶平”老师课的同学的学号、姓名;</p></li><li><p>输入两个正整数m和n，求其最大公约数和最小公倍数。</p></li></ol>]]></content>
      
      
      <categories>
          
          <category> Java面试题 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Java面试题11</title>
      <link href="/2018/09/14/Java%E9%9D%A2%E8%AF%95%E9%A2%9811/"/>
      <url>/2018/09/14/Java%E9%9D%A2%E8%AF%95%E9%A2%9811/</url>
      
        <content type="html"><![CDATA[<h3 id="一、单项选择题"><a href="#一、单项选择题" class="headerlink" title="一、单项选择题"></a>一、单项选择题</h3><ol><li><p>Java是从(          )语言改进重新设计。<br>A. Ada<br>B. C++<br>C. Pasacal<br>D. BASIC</p></li><li><p>下列语句哪一个正确(          )<br>A. Java程序经编译后会产生machine code<br>B. Java程序经编译后会产生byte code<br>C. Java程序经编译后会产生DLL<br>D. 以上都不正确</p></li><li><p>下列说法正确的有(          )<br>A. class中的constructor不可省略<br>B. constructor必须与class 同名，但方法不能与class 同名<br>C. constructor在一个对象被new时执行<br>D. 一个class只能定义一个constructor</p></li><li><p>提供Java存取数据库能力的包是(          )<br>A. java.sql<br>B. java.awt<br>C. java.lang<br>D. java.swing</p></li><li><p>下列运算符合法的是(          )<br>A. &amp;&amp;</p><p>B. &lt;&gt;</p><p>C. if </p><p>D. :=</p></li><li><p>执行如下程序代码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">a = <span class="number">0</span>;</span><br><span class="line">c = O;</span><br><span class="line"><span class="keyword">do</span> &#123;</span><br><span class="line">--C; </span><br><span class="line">a=a-<span class="number">1</span>;</span><br><span class="line">&#125; <span class="keyword">while</span> (a &gt; <span class="number">0</span>);</span><br></pre></td></tr></table></figure><p>后，C的值是(          )<br>A. 0</p><p>B. 1</p><p>C. -1</p><p>D. 死循环</p></li><li><p>下列哪一种叙述是正确的(          )<br>A. abstract修饰符可修饰字段、方法和类<br>B. 抽象方法的body部分必须用一对大括号{}包住<br>C. 声明抽象方法，大括号可有可无<br>D. 声明抽象方法不可写出大括号</p></li><li><p>下列语句正确的是(          )<br>A. 形式参数可被视为local variable<br>B. 形式参数可被字段修饰符修饰<br>C. 形式参数为方法被调用时，真正被传递的参数<br>D. 形式参数不可以是对象</p></li><li><p>下列哪种说法是正确的(          )<br>A. 实例方法可直接调用超类的实例方法<br>B. 实例方法可直接调用超类的类方法<br>C. 实例方法可直接调用其他类的实例方法<br>D. 实例方法可直接调用本类的类方法</p></li></ol><h3 id="二、多项选择题"><a href="#二、多项选择题" class="headerlink" title="二、多项选择题"></a>二、多项选择题</h3><ol><li>Java 程序的种类有(          )<br>A. 类(Class)<br>B. Applet<br>C. Application<br>D. Servlet</li><li>下列说法正确的有(          )<br>A. 环境变量可在编译 source code时指定<br>B. 在编译程序时，所能指定的环境变量不包括class path<br>C. javac一次可同时编译数个Java源文件<br>D. javac.exe 能指定编译结果要置于哪个目录( directory)</li><li>下列标识符不合法的有(          )<br>A. new<br>B. $Usdollars<br>C. 1234<br>D. car.taxi</li><li>下列说法错误的有(          )<br>A. 数组是一种对象<br>B. 数组属于一种原生类<br>C. int number=[]={31,23,33,43,35,63}<br>D. 数组的大小可以任意改变</li><li>不能用来修饰interface 的有(          )<br>A. private<br>B. public<br>C. protected<br>D. static</li><li>下列正确的有(          )<br>A. callbyvalue不会改变实际参数的数值<br>B. callbyreference能改变实际参数的参考地址<br>C. call by reference不能改变实际参数的参考地址<br>D. call by reference能改变实际参数的内容</li><li>下列说法错误的有(          )<br>A. 在类方法中可用this来调用本类的类方法<br>B. 在类方法中调用本类的类方法时可直接调用<br>C. 在类方法中只能调用本类中的类方法<br>D. 在类方法中绝对不能调用实例方法</li><li>下列说法错误的有(          )<br>A. Java面向对象语言容许单独的过程与函数存在<br>B. Java面向对象语言容许单独的方法存在<br>C. Java语言中的方法属于类中的成员( member)<br>D. Java语言中的方法必定隶属于某一类(对象)，调用方法与过程或函数相同</li><li>下列说法错误的有(          )<br>A. 能被jvaexe成功运行的iava dass文件必须有man0)方法<br>B. J2SDK就是Java API<br>C. Appletviewerexe可利用jar选项运行jar文件<br>D. 能被Appletviewer 成功运行的java class 文件必须有main()方法</li></ol><h3 id="三、判断题"><a href="#三、判断题" class="headerlink" title="三、判断题"></a>三、判断题</h3><ol><li>Java程序中的起始类名称必须与存放该类的文件名相同。</li><li>Unicode 是用16 位来表示一个字的。</li><li>原生类中的数据类型均可任意转换。</li></ol><h3 id="四、简答题"><a href="#四、简答题" class="headerlink" title="四、简答题"></a>四、简答题</h3><ol><li><p>HashMap 和Hashtable 有什么区别?</p></li><li><p>Java异常分类</p><p><img src="/2018/09/14/Java面试题11/huigezuishuai001.png"></p></li></ol>]]></content>
      
      
      <categories>
          
          <category> Java面试题 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Java面试题10</title>
      <link href="/2018/09/14/Java%E9%9D%A2%E8%AF%95%E9%A2%9810/"/>
      <url>/2018/09/14/Java%E9%9D%A2%E8%AF%95%E9%A2%9810/</url>
      
        <content type="html"><![CDATA[<ol><li><p>编写逆续输出给定字特串的方法，方法不返回值，结果输出在屏幕上，如参数为”abede” ，屏幕输出的效果为: edeba. (10分)</p></li><li><p>现有先进后出栈接口Stack定义如下，请解释程序中<t>的含义，再用ArrayList做个具体实现类 ArrayListStatck。</t></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Stack</span>&lt;<span class="title">T</span>&gt; </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">push</span><span class="params">(T obj)</span></span>; <span class="comment">//放入一个元素</span></span><br><span class="line"><span class="function">T <span class="title">get</span><span class="params">()</span></span>; <span class="comment">//直看最后放入的元素</span></span><br><span class="line"><span class="function">T <span class="title">pop</span><span class="params">()</span></span>; /获取最后放入的元素</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>观察下面的数列，</p><p>A) 请找出他的通项公式; </p><p>B) 用文字、伪代码、图表等形式(非程序) 写出产生并输出前50项的程序算法理辑，<br>C) 编写程序实现B的算法产生和输出前50项，结果按从小到大顺序排列显示，每行显示5项，每项间用TAB分割，行尾不要分制符。</p></li><li><p>简单的存款系统有四张表:</p><ul><li>客户信息，customer(customer_name, customer_street, customer_city)</li><li>支行信息，branch(branch_name, branch_city)</li><li>账户信息，account(account_name, branch_name, balance)</li><li>存款信息，depositor(account_name, customer_name)</li></ul><p>注，上表中除了账户信息的余额字段balance是数字类型，其他的都是字符类型。解答下面的问题或书写SQL:<br>简述关系数据库中索引和存储过程的作用;<br>1、写sQL,创建账户信息表，account name和branch name长度都是50; (5分)<br>2、 写SQL,查询“苏州”市， “科技城软件园”街道的客户，输出客户名称，城市，街道;(5分)<br>3、写SQL,查询所有名称包括”软件”或“科技”的客户的客户名称、所在城市和街道;(5分)<br>4、写SQL，查询“南京”市客户的账户信息，包括:客户名称，账户名称，支行名称，余额;(5分)<br>5、写SQL,查询每个客户的账户数和汇总余额;(5分)<br>6、写SQL,制作以支行所在城市为基准的全国城市存款排行榜，存款最多的排在最前面; (5分)<br>7、写SQL,给客户“新天地娱乐有限公司”在“深圳支行”的帐号转入10万元。(5分)</p></li></ol>]]></content>
      
      
      <categories>
          
          <category> Java面试题 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Java面试题9</title>
      <link href="/2018/09/14/Java%E9%9D%A2%E8%AF%95%E9%A2%989/"/>
      <url>/2018/09/14/Java%E9%9D%A2%E8%AF%95%E9%A2%989/</url>
      
        <content type="html"><![CDATA[<ol><li>面向对象的语言具有(          )性、(          )性、(          )性。</li><li>访问修饰符publie, private, protected,以及不写(默认)时的区别?。</li><li>String是最基本的数据类型吗? String s = new String( “xyz”); 创建了几个字符中对象?</li><li>2的64次方是多少。</li><li>Math. round(11.5)等于多少? Math. round(-11.5)等于多少?。</li><li>怎样将GB2312编码的字符串转换为ISO -8859- 1编码的字符串?</li><li>Error和Exception有什么区别?</li><li>运行时异常与受检异常有何异同?</li><li>列出一些你常见的运行时异常?</li><li>用自己的话简要阐述struts2的执行流程。</li><li>使用JavaScript写一个函数:确认用户是否退出当前页面，确认之后关闭窗口?</li><li>什么是ajax, 为什么要使用Ajax (请谈一下你对Ajax的认识)</li><li>写出一条sql语句:取出表a中第31到第40记录( sqlserver以自动增长<br>的id作为主键，注意: id 可能不是连续的)</li><li>如何防止SQL注入</li><li>谈谈你最大的缺点是什么。</li><li>谈谈你未来3年的职业规划。</li></ol>]]></content>
      
      
      <categories>
          
          <category> Java面试题 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Java面试题8</title>
      <link href="/2018/09/14/Java%E9%9D%A2%E8%AF%95%E9%A2%988/"/>
      <url>/2018/09/14/Java%E9%9D%A2%E8%AF%95%E9%A2%988/</url>
      
        <content type="html"><![CDATA[<h3 id="一、判断题（对的写T，错的写F并说明原因）"><a href="#一、判断题（对的写T，错的写F并说明原因）" class="headerlink" title="一、判断题（对的写T，错的写F并说明原因）"></a>一、判断题（对的写T，错的写F并说明原因）</h3><blockquote><p>5*4=20</p></blockquote><ol><li>一维字符数组相当于字符串（    ）</li><li>结构可以作为数据的元素，数组也可以作为结构的成员（        ）</li><li>有数组定义 <code>int a[2][2] = { {1}, {2, 3} };</code>则 <code>a[0][1]的值为0</code>（        ）</li><li>对用户的需求进行分析，最终以编程所需的方式表达出来，这是用户部门的技术人员必须承担的任务（        ）</li><li>数据库中索引的作业主要是提高数据的安全（        ）</li></ol><h3 id="二、编程题"><a href="#二、编程题" class="headerlink" title="二、编程题"></a>二、编程题</h3><blockquote><p>4*10=40</p></blockquote><ol><li>不使用库函数，编写函数 <code>int strcmp(char[] source, char[] dest)</code> （相等返回0，不等返回-1）</li><li>已知字符串 <code>char s[50] = &quot;Iamstudent&quot;;</code>，请编写程序将字符A插入到student之前，结果为 <code>&quot;IamAstudent&quot;</code></li><li>写函数 <code>int echo(char[] p)</code>判断字符是否是回文（是返回1，不是返回0，出错返回-1）</li><li>用递归算法实现，求出n!（n的阶乘）的值</li></ol><h3 id="三、数据库题"><a href="#三、数据库题" class="headerlink" title="三、数据库题"></a>三、数据库题</h3><blockquote><p>4*5=20</p></blockquote><p>设有关系EMP（ENO，ENAME，SALARY，DNO），其中各属性的含义依次为职工号、姓名、工资和所在部门号，以及关系DEPT（DNO，DNAME，MANAGER），其中各属性含义依次为部门号、部门名称、部门经理的职工号。根据提问，写成SQL</p><ol><li>查询001号职工所在部门名称</li><li>查询部门经理是001的部门所有员工职工号</li><li>列出各部门中工资不低于600元的职工的平均工资</li><li>请用SQL语句将”销售部“的那些工资数额低于600的职工的工资上调10%</li></ol><h3 id="四、问答题"><a href="#四、问答题" class="headerlink" title="四、问答题"></a>四、问答题</h3><blockquote><p>2*10=20</p></blockquote><ol><li>模块化具有独立性、耦合性和内聚性？阐明各自的作用</li><li>谈谈你对软件开发的认识，并说明其主要周期</li></ol>]]></content>
      
      
      <categories>
          
          <category> Java面试题 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Java面试题7</title>
      <link href="/2018/09/14/Java%E9%9D%A2%E8%AF%95%E9%A2%987/"/>
      <url>/2018/09/14/Java%E9%9D%A2%E8%AF%95%E9%A2%987/</url>
      
        <content type="html"><![CDATA[<h3 id="一、选择题"><a href="#一、选择题" class="headerlink" title="一、选择题"></a>一、选择题</h3><blockquote><p>每题3分</p></blockquote><ol><li><p>Java有几种基本数据类型?<br>A、4种<br>B、6种<br>C、8种<br>D、9种</p></li><li><p>下面哪些是Thread类的方法?<br>A、start()<br>B、run()<br>C、exit()<br>D、getPriority()</p></li><li><p>列说法正确的有（）<br>A、class中的constructor不可省略。<br>B、constructor必须与class同名，但方法不能与class网名。<br>C、constructor在一个对象被new时执行。<br>D、一个class只能定义一个constructor.</p></li><li><p>下列说法正确的有(）<br>A、LinkedList实现自List。<br>B、AbstractSet继承 自Set.<br>C、HashSet继承自AbstractSet.<br>D、WeakMap继承自HashMap.</p></li><li><p>0.6332的数据类型是（）<br>A、float<br>B、double<br>C、 Float<br>D、Double</p></li><li><p>下面哪些流类属于面向字符的输入流(<br>A、BufferedWriter<br>B、FileInputStream<br>C、0bjectInputStream<br>D、StringReader<br>E、InputStreamReader</p></li><li><p>System. out. println(“5” + 2) ;的输出结果应该是（）<br>A. 52<br>B. 7<br>C. 2<br>D. 5</p></li><li><p>下列程序的输出结果是<strong>__</strong>。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Example</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  String str = <span class="keyword">new</span> String(<span class="string">"good"</span>);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">char</span> ch[] = &#123;<span class="string">'a'</span>,<span class="string">'b'</span>,<span class="string">'c'</span>&#125;;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String args[])</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  Example ex=<span class="keyword">new</span> Example();</span><br><span class="line"></span><br><span class="line">  ex.change(ex.str,ex.ch);</span><br><span class="line"></span><br><span class="line">  System.out.printin(ex.str<span class="string">"and"</span>ex.ch);</span><br><span class="line"></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">change</span><span class="params">(String str,<span class="keyword">char</span> ch [])</span></span>&#123;</span><br><span class="line"></span><br><span class="line">  str=<span class="string">"test ok"</span>; ch[<span class="number">0</span>]=<span class="string">'g'</span>;</span><br><span class="line"></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>A．good and abc  </p><p>B．good and gbc</p><p>C．test ok and abc </p><p>D．test ok and gbc</p></li><li><p>要从文件”file.dat”中读出第10个字节到变量c中,下列哪个方法适合? （） </p><p>A、 FileInputStream in=new FileInputStream(“file.dat”); in.skip(9); int c=in.read(); </p><p>B、 FileInputStream in=new FileInputStream(“file.dat”); in.skip(10); int c=in.read(); </p><p>C、 FileInputStream in=new FileInputStream(“file.dat”); int c=in.read(); </p><p>D、 RandomAccessFile in=new RandomAccessFile(“file.dat”); in.skip(9); int c=in.readByte();</p></li><li><p>下列哪些异常是运行型异常，不需要在编写程序时声明? （）<br>A、NullPointerException<br>B、ClassCastException<br>C、FileNotFoundException<br>D、IndexOutOfBoundsException</p></li></ol><h3 id="二、判断题-正确的打V，错误的打x"><a href="#二、判断题-正确的打V，错误的打x" class="headerlink" title="二、判断题(正确的打V，错误的打x)"></a>二、判断题(正确的打V，错误的打x)</h3><blockquote><p>每题3分</p></blockquote><ol><li>String是最基本数据类型。（）</li><li>float型float f = 3.4;是正确。（）</li><li>不通过构造函数也能创建对象。（）</li><li>Java没有goto关键字。（）</li><li>short s1 = 1; s1 = sl + 1;这行代（）</li><li>构造器Constructor不可被override.（）</li><li>可以继承String类。（）</li><li>Math. round(-11.5)等于12.（）</li><li>接口可继承接口。（）</li><li>swtich不可以作用在String变量上。（）</li></ol><h3 id="三、解答题"><a href="#三、解答题" class="headerlink" title="三、解答题"></a>三、解答题</h3><blockquote><p>每题4分</p></blockquote><ol><li>面向对象的特征有哪些方面?</li><li>访间修饰行iierie woe.以及不写激以)时的区制</li><li>&amp;和&amp;&amp;的区别?</li><li>解释内存中的栈(stack)、堆(heap) 和静态在储区的用注。</li><li>用最有效率的方法计算2乘以8。</li><li>在JAVA中，如何跳出当前的多重嵌套循环?</li><li>阐述String, StringBuffer 和StringBuilder的区别?</li><li>描述一下JM加载class文件的原理机制?</li><li>char型变量中能不能存贮一个中文汉字?为什么2</li><li>abstract class和interface有什么区别?</li></ol>]]></content>
      
      
      <categories>
          
          <category> Java面试题 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Java面试题6</title>
      <link href="/2018/09/14/Java%E9%9D%A2%E8%AF%95%E9%A2%986/"/>
      <url>/2018/09/14/Java%E9%9D%A2%E8%AF%95%E9%A2%986/</url>
      
        <content type="html"><![CDATA[<h3 id="一、单项选择题"><a href="#一、单项选择题" class="headerlink" title="一、单项选择题"></a>一、单项选择题</h3><blockquote><p> 每题3分，共36分。</p></blockquote><ol><li><p>Java是从（   ）语言改进重新设计。</p><p>A) Ada</p><p>B) C++</p><p>C) Pasacal</p><p>D) BASIC</p></li><li><p>下列语句哪一个正确（   ）</p><p>A) Java程序经编译后会产生machine code</p><p>B) Java程序经编译后会产生byte code</p><p>C) Java程序经编译后会产生DLL</p><p>D) 以上都不正确</p></li><li><p>下列说法正确的有（  ）</p><p>A)class中的constructor不可省略</p><p>B) constructor必须与class同名，但方法不能与class同名</p><p>C) constructor在一个对象被new时执行</p><p>D) 一个class只能定义一个constructor</p></li><li><p>提供Java存取数据库能力的包是（  ）</p><p>A)java.sql</p><p>B)java.awt</p><p>C)java.lang</p><p>D)java.swing</p></li><li><p>下列运算符合法的是（  ）</p><p>A)&amp;&amp;</p><p>B)&lt;&gt;</p><p>C)if</p><p>D):=</p></li><li><p>执行如下程序代码后，C的值是（  ）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">a = <span class="number">0</span>;</span><br><span class="line">c = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">do</span> &#123;</span><br><span class="line">--c;</span><br><span class="line">a = a - <span class="number">1</span>;</span><br><span class="line">&#125; <span class="keyword">while</span> (a &gt; <span class="number">0</span>);</span><br></pre></td></tr></table></figure><p>A)0</p><p>B)1</p><p>C)-1</p><p>D)死循环</p></li><li><p>下列哪一种叙述是正确的（  ）</p><p>A)abstract修饰符可修饰字段、方法和类</p><p>B)抽象方法的body部分必须用一对大括号{ }包住</p><p>C)声明抽象方法，大括号可有可无</p><p>D)声明抽象方法不可写出大括号</p></li><li><p>下列语句正确的是（  ）</p><p>A)形式参数可被视为local variable</p><p>B)形式参数可被字段修饰符修饰</p><p>C)形式参数为方法被调用时，真正被传递的参数</p><p>D)形式参数不可以是对象</p></li><li><p>下列哪种说法是正确的（  ）</p><p>A)实例方法可直接调用超类的实例方法</p><p>B)实例方法可直接调用超类的类方法</p><p>C)实例方法可直接调用其他类的实例方法</p><p>D)实例方法可直接调用本类的类方法</p></li><li><p>jsp指令中isELIgnored=”boolean”的意思是（）</p><p>A)决定是否实现Servler的单线程模式</p><p>B)决定改页面是否是一个错误处理页面</p><p>C)决定是否支持EL表示</p><p>D)没有具体的含义</p></li><li><p>按照MVC设计模式，JSP用于实现（  ）</p><p>A)Model</p><p>B)View</p><p>C)Controller</p><p>D)容器</p></li><li><p>下面哪个不是表单标记(  )</p><p>A)INPUT</p><p>B)RADIO</p><p>C)CHECKBOX</p><p>D)TR</p></li></ol><h3 id="二、多项选择题"><a href="#二、多项选择题" class="headerlink" title="二、多项选择题"></a>二、多项选择题</h3><blockquote><p>每题4分，共20分</p></blockquote><ol><li><p>下列说法错误的有（ ）</p><p>A)在类方法中可用this来调用本类的类方法</p><p>B)在类方法中调用本类的类方法时可直接调用</p><p>C)在类方法中只能调用本类中的类方法</p><p>D)在类方法中绝对不能调用实例方法</p></li><li><p>下列说法正确的有（ ）</p><p>A)环境变量可在编译source code时指定</p><p>B)在编译程序时，所能指定的环境变量不包括class path</p><p>C)javac一次可同时编译数个Java源文件</p><p>D)javac.exe能指定编译结果要置于哪个目录（directory）</p></li><li><p>下列标识符不合法的有（ ）</p><p>A)new</p><p>B)$Usdollars</p><p>C)1234</p><p>D)car.taxi</p></li><li><p>下列正确的有（ ）</p><p>A)call by value不会改变实际参数的数值</p><p>B)call by reference能改变实际参数的参考地址</p><p>C)call by reference不能改变实际参数的参考地址</p><p>D)call by reference能改变实际参数的内容</p></li><li><p>下列说法错误的有（ ）</p><p>A)Java面向对象语言容许单独的过程与函数存在</p><p>B)Java面向对象语言容许单独的方法存在</p><p>C)Java语言中的方法属于类中的成员（member）</p><p>D)Java语言中的方法必定隶属于某一类（对象），调用方法与过程或函数相同</p></li></ol><h3 id="三、简答题"><a href="#三、简答题" class="headerlink" title="三、简答题"></a>三、简答题</h3><blockquote><p>每题5分，共20分</p></blockquote><ol><li><p>XML包括哪些解释技术，区别是什么？</p></li><li><p>JSP有哪些内置对象和动作？它们的作用分别是什么？ </p></li><li><p>描述Static Nested Class 和 Inner Class的不同？ </p></li><li><p>接口是否可继承接口? 抽象类是否可实现(implements)接口? 抽象类是否可继承实体类(concrete class)?</p></li></ol><h3 id="四、数据库"><a href="#四、数据库" class="headerlink" title="四、数据库"></a>四、数据库</h3><p>为管理岗位业务培训信息，建立三个表：</p><p>S（S#，SN，SD，SA）S#，SN，SD，SA分别代表学号、学员姓名、所属单位、学员年龄</p><p>C（C#，CN）C#，CN分别代表课程编号、课程名称</p><p>SC（S#，C#，G）S#，C#，G分别代表学号、所选修的课程编号、学习成绩</p><p>请写出如下SQL语句</p><ol><li><p>使用标准SQL嵌套语句查询选修课程名称为‘税收基础’的学员学号和姓名(4分)</p></li><li><p>使用标准SQL嵌套语句查询选修课程编号为‘C2’的学员姓名和所属单位(4分)</p></li><li><p>使用标准SQL嵌套语句查询选修全部课程的学员姓名和所属单位(6分)</p></li></ol><h3 id="五、逻辑思维部分"><a href="#五、逻辑思维部分" class="headerlink" title="五、逻辑思维部分"></a>五、逻辑思维部分</h3><ol><li><p>谁没有钱?(3分)</p><p>李娜、叶楠和赵芳三位女性的特点符合下面的条件：</p><p>（1）恰有两位非常学识渊博，恰有两位十分善良，恰有两位温柔，恰有两位有钱；</p><p>（2）每位女性的特点不能超过三个；</p><p>（3）对于李娜来说，如果她非常学识渊博，那么她也有钱；</p><p>（4）对于叶楠和赵芳来说，如果她十分善良，那么她也温柔；</p><p>（5）对于李娜和赵芳来说，如果她有钱，那么她也温柔。</p><p>哪一位女性并非有钱？</p></li><li><p>拥有古物的是谁？(3分)</p><p>孙某和张某是考古学家老李的学生。有一天，老李拿了一件古物来考验两人，两人都无法验证出来这件古物试谁的。老李告诉了孙某拥有者的姓，告诉张某拥有者的名，并且在纸条上写下以下几个人的人名，问他们知道谁才是拥有者？</p><p>纸条上的名字有：沈万三、岳飞、岳云、张飞、张良、张鹏、赵括、赵云、赵鹏、沈括。</p><p>孙某说：如果我不知道的话，张某肯定也不知道。</p><p>张某说：刚才我不知道，听孙某一说，我现在知道了。</p><p>孙某说：哦，那我也知道了。</p><p>请问：那件古物是谁的？</p></li><li><p>填数字（4分）</p><p>3</p><p>13</p><p>1113</p><p>3113</p><p>132113</p><p>1113122113</p><p>( )</p></li></ol>]]></content>
      
      
      <categories>
          
          <category> Java面试题 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Java面试题5</title>
      <link href="/2018/09/14/Java%E9%9D%A2%E8%AF%95%E9%A2%985/"/>
      <url>/2018/09/14/Java%E9%9D%A2%E8%AF%95%E9%A2%985/</url>
      
        <content type="html"><![CDATA[<h3 id="一、选择题"><a href="#一、选择题" class="headerlink" title="一、选择题"></a>一、选择题</h3><ol><li><p>下面说法正确的是（）<br>A. class中的constructor不可省略<br>B. constructor必须与class同名，但方法不能与class同名<br>C. constructor在一个对象被new时执行<br>D. 一个class只能定义一个constructor </p></li><li><p>关于Java编译，下列语句哪一个正确（）  </p><p>A. Java程序经编译后会产生machine code  </p><p>B.  Java程序经编译后会产生byte code  </p><p>C.  Java程序经编译后会产生DLL  </p><p>D. 以上都不正确 </p></li><li><p>给定以下代码段</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">A</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"A"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">B</span> <span class="keyword">extends</span> <span class="title">A</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">B</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"B"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        B b = <span class="keyword">new</span> B();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上述程序将() </p><p>A. 不能通过编译  </p><p>B. 通过编译，输出为AB  </p><p>C. 通过编译，输出为B  </p><p>D. 通过编译，输出为A </p></li><li><p>下列说法正确的是（） </p><p>A. LinkedList继承自List  </p><p>B. AbstractSet继承自Set  </p><p>C. HashSet继承自AbstractSet  </p><p>D. WeakMap继承自HashMap</p></li><li><p>下列说法正确的是（） </p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"userTable"</span> <span class="attr">class</span>=<span class="string">"com.xfaccp.bean.UserTable"</span>&gt;</span>   </span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"userName"</span>&gt;</span>     </span><br><span class="line"><span class="tag">&lt;<span class="name">value</span>&gt;</span>ACCP<span class="tag">&lt;/<span class="name">value</span>&gt;</span>   </span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span>  </span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><p>A. 其中的userName是UserTable中的属性，可以不要get、set方法。  </p><p>B. 其中的userName是UserTable中的属性，可以不要get方法，但是一定要有set方法   </p><p>C. 其中的userName是UserTable中的属性，可以不要set方法，但是一定要有get方法   </p><p>D. 其中的userName是UserTable中的属性，一定要有get和set方法 </p></li><li><p>在Hibernate的异常处理机制中，如果 Session 抛出异常, 应该立即回滚数据库事务，调用 （），丢弃该 Session实例。  A. Session.Flush()  </p><p>B. Session.Load()  </p><p>C. Session.Delete()  </p><p>D. Session.Close() </p></li><li><p>下面哪些是Thread类的方法（）  </p><p>A. start() </p><p>B. run() </p><p>C. exit() </p><p>D. getPriority() </p></li><li><p>下列属于关系型数据库的是（）  </p><p>A. Oracle </p><p>B. MySql </p><p>C. IMS </p><p>D. MongoDB </p></li><li><p>下列关于修饰符混用的说法，错误的是( )  </p><p>A. abstract不能与final并列修饰同一个类  </p><p>B. abstract类中不可以有private的成员  </p><p>C. abstract方法必须在abstract类中  </p><p>D. static方法中能处理非static的属性 </p></li><li><p>Java语言中，String类的IndexOf()方法返回的类型是？  </p><p>A. Int16  </p><p>B. Int32  </p><p>C. int   </p><p>D. long </p></li></ol><h3 id="二、问答题"><a href="#二、问答题" class="headerlink" title="二、问答题"></a>二、问答题</h3><ol><li><p>请用jquery语言写出ajax请求或者post请求代码</p></li><li><p>请写出常用的Linux指令，不低于10个；请写出linux tomcat启动停止命令 </p></li><li><p>java.lang.OutOfMemoryError: PermGen space，请问该错误是什么原因造成的，如何解决？  </p></li><li><p>请写出您熟悉的几种设计模式，并做简单介绍</p></li><li><p>请写出多线程代码，使用Thread或runnable，并说出两者区别  </p></li><li><p>请列出java常见的开源数据连接词，并对参数做出简单的说明  </p></li><li><p>框架书写  </p><p>（1）请写出springMVC框架配置的主要部分  </p><p>（2）请写出SSH或者SSM配置的主要部分  </p><p>（3）请写easyui或者bootstrap最常用控件的名字  </p><p>（4）请写出开发过程中最难的sql语句（mysql,Oracle均可）</p></li></ol>]]></content>
      
      
      <categories>
          
          <category> Java面试题 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Java面试题4</title>
      <link href="/2018/09/14/Java%E9%9D%A2%E8%AF%95%E9%A2%984/"/>
      <url>/2018/09/14/Java%E9%9D%A2%E8%AF%95%E9%A2%984/</url>
      
        <content type="html"><![CDATA[<h3 id="数据库笔试题"><a href="#数据库笔试题" class="headerlink" title="数据库笔试题"></a>数据库笔试题</h3><ol><li><p>truncate 和 delete 的区别?</p></li><li><p>按班级编号分组统计每个班的人数，最高分，最低分，平均分，并按平均分降序排列 Students(stu_no , stu_name, stu_score)</p></li><li><p>aa, bb表都有20个字段，且记录数量都很大，aa, bb表的X字段(非空) 上有索引，请用SQL列出aa表里面存在的X在bb表不存在的X的值，请写出认为最快的语句，并解译原因。</p></li><li><p>存储过程和函数的区别?</p></li><li><p>游标的作用?如何知道游标已经到了最后?</p></li><li><p>主键索引和唯一索引的区别?</p></li><li><p>表A有f1和f2两个字段，表B有f1和f3字段，老B.f1=A.f1，将表B.f3更新到A.f2</p></li></ol><h3 id="Java笔试题"><a href="#Java笔试题" class="headerlink" title="Java笔试题"></a>Java笔试题</h3><ol><li><p>下面代码有什么不正确之处?</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span>) <span class="keyword">if</span>(username.equals(<span class="string">"张三"</span>))&#123;&#125;</span><br><span class="line"><span class="number">2</span>) String abc = <span class="string">"abc"</span>;System.out.println(abc.charAt(<span class="number">3</span>));</span><br></pre></td></tr></table></figure></li><li><p>forword与redirect的区别?</p></li><li><p>以下代码运行出什么结果?</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">function <span class="title">test</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    console.log(a);</span><br><span class="line">console.log(foo());</span><br><span class="line">var a = <span class="number">1</span>;</span><br><span class="line">    <span class="function">function <span class="title">foo</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">2</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>Java创建对象的几种方式?</p></li><li><p>以下代码的运行结果</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    Integer f1 = <span class="number">100</span>, f2 = <span class="number">100</span>, f3 = <span class="number">150</span>, f4= <span class="number">150</span>;</span><br><span class="line">System.out.println(f1 == f2);</span><br><span class="line">System.out,println(f3 == f4);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>将前台JSP页面中的一个ID为userID的div元素隐藏的方法都有哪些，分别是什么?</p></li><li><p>Java实现冒泡排序</p></li><li><p>请写出任意一个设计模式的核心代码。</p></li></ol>]]></content>
      
      
      <categories>
          
          <category> Java面试题 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Java面试题3</title>
      <link href="/2018/09/14/Java%E9%9D%A2%E8%AF%95%E9%A2%983/"/>
      <url>/2018/09/14/Java%E9%9D%A2%E8%AF%95%E9%A2%983/</url>
      
        <content type="html"><![CDATA[<h3 id="一、不定项选择题："><a href="#一、不定项选择题：" class="headerlink" title="一、不定项选择题："></a>一、不定项选择题：</h3><ol><li><p>下列说法正确的有（        ）</p><p>A. class 中的constructor不可省略<br>B. constructor必须与class同名，但方法不能与class同名<br>C. constructor在一个对象被new时执行<br>D. 一个class只能定义一个construetor</p></li><li><p>在jave中，类Worker是类Person的子类，Worker的构造方法中有句”super()”, 该语句(         )<br>A. 调用类Worker中定义的super()方法<br>B. 调用类Person中定义的super()方法<br>C. 调用类Person的构造函数<br>D. 句法错误</p></li><li><p>以下哪几项，在一个继承了A类的子类中是有效的( )</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">int</span> <span class="title">method_demo</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>A. public int method_demo(int a, int b){ return 0;}<br>B. private int method_demo(int a, int b){ return 0;}<br>C. private int method_demo(int a, long b){ return 0;}<br>D. public short method_demo(int a, int b){ return 0;)<br>E. static protected int method demo(int a, int b){ return 0;}</p></li></ol><h3 id="二、Java中的类和接口是否允许多继承，请描述具体实现或者不允许的原因"><a href="#二、Java中的类和接口是否允许多继承，请描述具体实现或者不允许的原因" class="headerlink" title="二、Java中的类和接口是否允许多继承，请描述具体实现或者不允许的原因?"></a>二、Java中的类和接口是否允许多继承，请描述具体实现或者不允许的原因?</h3><p>如果有两个类A、B(非接口)，现在要求同时使用这两个类的功能。那么需要如何编写这个类C呢?如果A、B均为接口，又该怎样设计类C呢?</p><h3 id="三、Java-中在处理异常的时候，经常会用到如下代码结构"><a href="#三、Java-中在处理异常的时候，经常会用到如下代码结构" class="headerlink" title="三、Java 中在处理异常的时候，经常会用到如下代码结构:"></a>三、Java 中在处理异常的时候，经常会用到如下代码结构:</h3><p>代码段1：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">    A</span><br><span class="line">&#125; <span class="keyword">catch</span> &#123;</span><br><span class="line">    B</span><br><span class="line">&#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">    C</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>代码段2：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">    A</span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125; <span class="keyword">catch</span> &#123;</span><br><span class="line">    B</span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">    C</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>代码段3：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">    A</span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125; <span class="keyword">catch</span> &#123;</span><br><span class="line">    B</span><br><span class="line">    <span class="keyword">return</span> <span class="number">2</span>;</span><br><span class="line">&#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">    C</span><br><span class="line">    <span class="keyword">return</span> <span class="number">3</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>请问：</p><p>1）代码段1中A、B、C部分一般分别是对应什么类型的代码？</p><p>2）请详细描述代码段2中代码的执行流程；</p><p>3）请详细描述代码段3中代码的执行流程，并给出各种可能的情况</p><h3 id="四、以下程序的输出结果是："><a href="#四、以下程序的输出结果是：" class="headerlink" title="四、以下程序的输出结果是："></a>四、以下程序的输出结果是：</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demol</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">changeValue</span> <span class="params">(String str)</span> </span>&#123;</span><br><span class="line">        str = str + <span class="string">"5"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(Stringl args)</span> </span>&#123;</span><br><span class="line">        String str = <span class="string">"1234"</span>;</span><br><span class="line">changeValue(str) :</span><br><span class="line">System.out.println(str);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="五、以下程序的输出结果是"><a href="#五、以下程序的输出结果是" class="headerlink" title="五、以下程序的输出结果是:"></a>五、以下程序的输出结果是:</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">static</span> Boolean <span class="title">foo</span><span class="params">(<span class="keyword">char</span> c)</span> </span>&#123;</span><br><span class="line">    System.out.print(c);</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">&#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span> <span class="params">(String[] argv)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> i = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(foo(<span class="string">'A'</span>); foo(<span class="string">'B'</span>) &amp;&amp; (i &lt; <span class="number">2</span>); foo(<span class="string">'C'</span>)) &#123;</span><br><span class="line">            i++;</span><br><span class="line">            foo(<span class="string">'D'</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="六、数据库题"><a href="#六、数据库题" class="headerlink" title="六、数据库题"></a>六、数据库题</h3><p>表1：学生表</p><div class="table-container"><table><thead><tr><th>no</th><th>name</th><th>sex</th><th>age</th><th>dept</th></tr></thead><tbody><tr><td>1612101</td><td>李勇</td><td>男</td><td>21</td><td>数学系</td></tr><tr><td>1612102</td><td>刘晨</td><td>男</td><td>23</td><td>数学系</td></tr><tr><td>1612103</td><td>王敏</td><td>女</td><td>21</td><td>信息工程系</td></tr><tr><td>1612104</td><td>张立</td><td>男</td><td>20</td><td>信息工程系</td></tr></tbody></table></div><p>表2：课程信息表</p><div class="table-container"><table><thead><tr><th>no</th><th>name</th><th>hours</th></tr></thead><tbody><tr><td>C01</td><td>计算机导论</td><td>70</td></tr><tr><td>C02</td><td>VC++</td><td>90</td></tr><tr><td>C03</td><td>计算机网络</td><td>80</td></tr><tr><td>C04</td><td>数据库基础</td><td>105</td></tr><tr><td>C05</td><td>高等数学</td><td>180</td></tr><tr><td>C06</td><td>数据结构</td><td>72</td></tr></tbody></table></div><p>表3：学生选课表</p><div class="table-container"><table><thead><tr><th>student_no</th><th>course_no</th><th>grade</th></tr></thead><tbody><tr><td>1612101</td><td>C01</td><td>90</td></tr><tr><td>1612101</td><td>C02</td><td>86</td></tr><tr><td>1612101</td><td>C05</td><td>84</td></tr><tr><td>1612102</td><td>C01</td><td>85</td></tr><tr><td>1612102</td><td>C03</td><td>91</td></tr><tr><td>1612102</td><td>C06</td><td>70</td></tr><tr><td>1612103</td><td>C04</td><td>80</td></tr><tr><td>1612103</td><td>C03</td><td>82</td></tr></tbody></table></div><p>1) 查询学生都选修了哪些课程，要求列出课程名、课程号、选修人数以及最好成绩;<br>2) 统计每个学生的选课门数，并按选课门数的递减顺序显示;<br>3) 查询选课门数超过2门的学生的平均成绩和选课门数;<br>4) 查询有考试成绩的所生的姓名、修课名称及考试成绩，并将查询结果放到一张新的表</p>]]></content>
      
      
      <categories>
          
          <category> Java面试题 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Java面试题2</title>
      <link href="/2018/09/14/Java%E9%9D%A2%E8%AF%95%E9%A2%982/"/>
      <url>/2018/09/14/Java%E9%9D%A2%E8%AF%95%E9%A2%982/</url>
      
        <content type="html"><![CDATA[<h3 id="选择题"><a href="#选择题" class="headerlink" title="选择题"></a>选择题</h3><blockquote><p>每题4分，共26分</p></blockquote><ol><li><p>根据以下代码回答问题，放置什么方法在第6行，会引起编译错误？（         ）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span>) <span class="class"><span class="keyword">class</span> <span class="title">Super</span> </span>&#123;</span><br><span class="line"><span class="number">2</span>)    <span class="function"><span class="keyword">public</span> <span class="keyword">float</span> <span class="title">getNum</span><span class="params">()</span> </span>&#123; <span class="keyword">return</span> <span class="number">3.0f</span>; &#125;</span><br><span class="line"><span class="number">3</span>) &#125;</span><br><span class="line"><span class="number">4</span>)</span><br><span class="line"><span class="number">5</span>) <span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Sub</span> <span class="keyword">extends</span> <span class="title">Super</span> </span>&#123;</span><br><span class="line"><span class="number">6</span>)     </span><br><span class="line"><span class="number">7</span>) &#125;</span><br></pre></td></tr></table></figure><p>A. <code>public float getNum() { return 4.0f; }</code><br>B. <code>public void getNum() { }</code><br>C. <code>public float getNum(double d) { }</code><br>D. <code>public doubl getNum(float d) { return 4.0d; }</code></p></li><li><p>根据以下代码回答问题，输出结果是什么？（         ）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Foo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String args[])</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            System.out.println(<span class="string">"Finally"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>A. print out nothing<br>B. print out “Finally”<br>C. 编译错误<br>D. 以上都不对</p></li><li><p>根据以下代码回答问题，请问输出i和j的值是多少？（         ）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> i = <span class="number">1</span>，j = <span class="number">10</span>;</span><br><span class="line"><span class="keyword">do</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (i++ &gt; --j) <span class="keyword">continue</span>;</span><br><span class="line">&#125; <span class="keyword">while</span> (i &lt; <span class="number">5</span>);</span><br></pre></td></tr></table></figure><p>A. i = 6,  j = 5<br>B. i = 5,  j = 5<br>C. i = 6,  j = 4<br>D. i = 5,  j = 6</p></li><li><p>请问java的关键字? (           )<br>A. run<br>B. low<br>C. import<br>D. implement</p></li><li><p>根据以上代碼回答向題:靖向輸出結果是多少?()</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        System.out.printIn(<span class="number">6</span>^<span class="number">3</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>A. 5<br>B. 6<br>C. 3<br>D. 4</p></li></ol><h3 id="简答题"><a href="#简答题" class="headerlink" title="简答题"></a>简答题</h3><blockquote><p>每题5分，共50分</p></blockquote><ol><li>java 中的基本类型有哪些?</li><li>日志打印的log4j的配置中%t表示什么?</li><li>String是值传递还是引用传递?</li><li>什么是乐观锁、什么是悲观锁，两者的区别是什么?</li><li>java.util.concurrent 包中借助CAS实现锁, CAS与synchronouse的区别是什么?</li><li>Spring中什么时候引起NotWritablePropertyException和Could not open class path resource [Appl icationContext. xml]</li><li>请描述Spring和SpringMVC的区别。</li><li>什么是spring的aop, aop 的作用是什么。</li><li>请描述DOM、SAX、JDOM、DOM4J 的四者之间的区别。</li><li>1) 请描述spring中lazy-init属性的作用和优缺点。<br>2) 描述init-method和destroy method属性的作用。<br>3) 描述factory-method属性的作用。</li></ol><h3 id="数据库"><a href="#数据库" class="headerlink" title="数据库"></a>数据库</h3><blockquote><p>每题5分， 共10分</p></blockquote><p>有一个人员信息表user_info(user_id, name, dept.id, amt) 、部门信息表dept_info(dept_id, dept_desc), 人员功夫表user_kongfu(user.id, kf.id, main_kf_flag)和功夫信息代码表kf_jinfo(kf_id, kf_desc)表中的数据分别如下:</p><p>人员信息表：</p><div class="table-container"><table><thead><tr><th style="text-align:center">用户ID</th><th style="text-align:center">姓名</th><th style="text-align:center">部门ID</th><th style="text-align:center">个人资产（金额）</th></tr></thead><tbody><tr><td style="text-align:center">1001</td><td style="text-align:center">令狐冲</td><td style="text-align:center">1</td><td style="text-align:center">70</td></tr><tr><td style="text-align:center">1002</td><td style="text-align:center">任我行</td><td style="text-align:center">2</td><td style="text-align:center">0</td></tr><tr><td style="text-align:center">1003</td><td style="text-align:center">东方不败</td><td style="text-align:center">2</td><td style="text-align:center">528</td></tr><tr><td style="text-align:center">1004</td><td style="text-align:center">风清扬</td><td style="text-align:center">1</td><td style="text-align:center">10</td></tr><tr><td style="text-align:center">1005</td><td style="text-align:center">左冷禅</td><td style="text-align:center">4</td><td style="text-align:center">230</td></tr><tr><td style="text-align:center">1006</td><td style="text-align:center">冲虚</td><td style="text-align:center">3</td><td style="text-align:center">50</td></tr><tr><td style="text-align:center">1007</td><td style="text-align:center">岳不群</td><td style="text-align:center">1</td><td style="text-align:center">158</td></tr><tr><td style="text-align:center">1008</td><td style="text-align:center">天门道人</td><td style="text-align:center">5</td><td style="text-align:center">-10</td></tr></tbody></table></div><p>部门信息表：</p><div class="table-container"><table><thead><tr><th>部门ID</th><th>部门名称</th></tr></thead><tbody><tr><td>1</td><td>华山</td></tr><tr><td>2</td><td>黑山崖</td></tr><tr><td>3</td><td>武当</td></tr><tr><td>4</td><td>嵩山</td></tr><tr><td>5</td><td>泰山</td></tr></tbody></table></div><p>人员功夫表(1是主功夫)：</p><div class="table-container"><table><thead><tr><th>用户ID</th><th>功夫ID</th><th>主功夫标志</th></tr></thead><tbody><tr><td>1001</td><td>1</td><td>1</td></tr><tr><td>1001</td><td>2</td><td>0</td></tr><tr><td>1001</td><td>4</td><td>0</td></tr><tr><td>1002</td><td>4</td><td>1</td></tr><tr><td>1003</td><td>3</td><td>1</td></tr><tr><td>1004</td><td>1</td><td>1</td></tr><tr><td>1005</td><td>5</td><td>1</td></tr><tr><td>1006</td><td>7</td><td>1</td></tr><tr><td>1007</td><td>2</td><td>0</td></tr><tr><td>1007</td><td>3</td><td>1</td></tr><tr><td>1008</td><td>6</td><td>0</td></tr></tbody></table></div><p> 功夫信息代码表：</p><div class="table-container"><table><thead><tr><th>功夫ID</th><th>功夫描述</th></tr></thead><tbody><tr><td>1</td><td>独孤九剑</td></tr><tr><td>2</td><td>紫霞神功</td></tr><tr><td>3</td><td>辟邪剑法</td></tr><tr><td>4</td><td>吸星大法</td></tr><tr><td>5</td><td>寒冰掌</td></tr><tr><td>6</td><td>三脚猫</td></tr><tr><td>7</td><td>太极剑法</td></tr></tbody></table></div><p> 请给出SQL统计有主功夫没有次功夫的人员名单以及部门名称、功夫描述和个人资产。</p><h3 id="UNIX常用命令"><a href="#UNIX常用命令" class="headerlink" title="UNIX常用命令"></a>UNIX常用命令</h3><blockquote><p>每题5分，共10分</p></blockquote><ol><li>unix下如何让命令在后台执行？</li><li><code>rm -i</code> 与 <code>rm -r</code> 各实现什么功能？</li></ol><h3 id="思维逻辑题"><a href="#思维逻辑题" class="headerlink" title="思维逻辑题"></a>思维逻辑题</h3><blockquote><p>每题10分，共10分 </p></blockquote><ol><li>一楼到十楼的每层电梯门口都放着一颗钻石，钻石大小不一。你乘坐电梯从一楼到十楼，每层楼电梯门都会打开一次，手里只能拿一颗钻石，问怎样才能拿到最大的一颗?</li></ol>]]></content>
      
      
      <categories>
          
          <category> Java面试题 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Java面试题1</title>
      <link href="/2018/08/03/Java%E9%9D%A2%E8%AF%95%E9%A2%981/"/>
      <url>/2018/08/03/Java%E9%9D%A2%E8%AF%95%E9%A2%981/</url>
      
        <content type="html"><![CDATA[<h3 id="选择题"><a href="#选择题" class="headerlink" title="选择题"></a>选择题</h3><blockquote><p>评分标准: 每题3分*6题 共18分</p></blockquote><ol><li>SQL语言中，删除一个表的命令是(            )<br>A. CLEAR TABLE<br>B. DROP TABlE<br>C. DELETE TABLE<br>D. REMOVE TABI E</li><li>Java语言中int类型数据占用多少位?(            )<br>A. 32<br>B. 64<br>C. 16<br>D. 20</li><li>一个Java程序运行从上到下的环境次序是(            )<br>A. 操作系统、Java程序、JRE/JVM、 硬件<br>B. JRE/JVM、 Java程序、硬件、操作系统<br>C. Java程序、JRE/JVM、操作系统、硬件<br>D. Java程序、操作系统、JRE/JVM、硬件</li><li>以下哪项不属于数据模型(            )<br>A. 关系模型<br>B. 网状模型<br>C. 层次模型<br>D. 网络模型</li><li>创建数据库使用以下哪项(            )<br>A. create mytest<br>C. database mytest<br>B. create table mytest<br>D. create database mytest</li><li>SQL是一种(         )语言<br>A. 函数型<br>B. 高级算法<br>C. 关系数据库<br>D. 人工智能</li></ol><h3 id="问答题"><a href="#问答题" class="headerlink" title="问答题"></a>问答题</h3><ol><li>String是最基本的数据类型吗? Java基本类型有哪些? (15分)</li><li>谈谈MySQL innodb事务及产生死锁，如何解决死锁的思路? (10分)</li><li>3谈谈有关MySQL Replication复制的原理及实施流程? (22分)</li><li>请列出java24种设计模式与6大原则(25分)</li><li>你认为你应聘我们公司的java 程序员，你自身的优势在哪?(10分)</li></ol>]]></content>
      
      
      <categories>
          
          <category> Java面试题 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
  
  
</search>
